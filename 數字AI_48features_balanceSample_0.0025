{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "數字AI_Allpoint分析ML.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "DAHf6mKTORQs",
        "bdPjxn31l87h",
        "Kez10h6fALj_"
      ],
      "authorship_tag": "ABX9TyOBm1bwYQ7mEqKeAG7p4dJr",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/loveju3/4th-ML100Days/blob/master/%E6%95%B8%E5%AD%97AI_48features_balanceSample_0.0025\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7nnoLSIv08Uy"
      },
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn import metrics\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 杰倫規格"
      ],
      "metadata": {
        "id": "GgAFmwly9NAF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 須符合以下的條件\n",
        "# Target value的 正負10%\n",
        "# MAE(Mean Averager Error) < 1.5個標準差\n",
        "# MAX error < 3個標準差\n",
        "# 整批料號推論時間: 1分鐘?\n",
        "\n",
        "# 7種料號驗證 "
      ],
      "metadata": {
        "id": "Pev9-ORo9LNc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### ML版控\n",
        "可skip"
      ],
      "metadata": {
        "id": "VoYaxFzv5usy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install mlflow\n",
        "import mlflow"
      ],
      "metadata": {
        "id": "YkRquUSkIAB_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Load Data"
      ],
      "metadata": {
        "id": "PPwRUcFb531X"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "I0G-nCEniA2M",
        "outputId": "c067d79f-f229-4673-fa4e-ec18a22df7dc"
      },
      "source": [
        "# 給Data路徑\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "data = pd.read_csv(\"/content/drive/MyDrive/330190Qtotal.csv\", encoding='cp950')"
      ],
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()"
      ],
      "metadata": {
        "id": "Na4Dz6UDl0Fv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BABTWG_jpwOp"
      },
      "source": [
        "# Helper Function\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def GetAVGErr(predict, truth):\n",
        "  sum = 0\n",
        "  for i in range(len(predict)):\n",
        "    _err = ((predict[i] - truth[i]) / truth[i])\n",
        "    sum += abs(_err)\n",
        "    frac = sum / len(predict)\n",
        "    avg = np.round(frac, 4)\n",
        "  return avg"
      ],
      "metadata": {
        "id": "W2w9g17CBJpg"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "18Ydg2ujpvDe"
      },
      "source": [
        "def CalErrList(predict, truth):\n",
        "  err = []\n",
        "  for i in range(len(predict)):\n",
        "    _err = ((predict[i] - truth[i]) / truth[i])\n",
        "    _err = str(_err * 100) + '%'\n",
        "    err.append(_err)\n",
        "  return err"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9AzC1YoZ0LZB"
      },
      "source": [
        "def DrawCurve(predict, truth):\n",
        "  x = [i for i in range(len(predict))]\n",
        "  truth_y = truth\n",
        "  predict_y = predict\n",
        "\n",
        "  print(predict_y)\n",
        "  plt.plot(x, truth_y, 'r')\n",
        "  plt.plot(x, predict_y, 'b')\n",
        "  plt.legend(['y = truth', 'y = predict'], loc='upper left')\n",
        "  plt.show()"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tMdfas-MS2id"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import warnings\n",
        "warnings.simplefilter(action='ignore', category=FutureWarning)\n",
        "\n",
        "def plotImp(model, X , num = 20, fig_size = (40, 20)):\n",
        "    feature_imp = pd.DataFrame({'Value':model.feature_importance(),'Feature':X.columns})\n",
        "    plt.figure(figsize=fig_size)\n",
        "    sns.set(font_scale = 5)\n",
        "    sns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False)[0:num])\n",
        "    plt.title('LightGBM Features (avg over folds)')\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('lgbm_importances-01.png')\n",
        "    plt.show()"
      ],
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dcZbd5uQp37Q"
      },
      "source": [
        "# Drop Useless Columns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 找出全部欄位都是相同的 column\n",
        "for col in data.columns:\n",
        "  if data[col].nunique() == 1:\n",
        "    print('{} column only has one value {}'.format(col, data[col][0]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i7khh9nL9nC8",
        "outputId": "d5cc3b91-00e3-4d96-aa1f-2a1fb7f0d24d"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "溢流水洗2上噴壓 column only has one value 19\n",
            "溢流水洗2下噴壓 column only has one value 19\n",
            "溢流水洗3上噴壓 column only has one value 17\n",
            "溢流水洗4上噴壓 column only has one value 19\n",
            "溢流水洗5上噴壓 column only has one value 19\n",
            "退膜速度-設 column only has one value 25\n",
            "PN column only has one value 323190Q\n",
            "LAYER column only has one value top\n",
            "MEASURE_NO column only has one value sever\n",
            "COPPER_THICKNESS column only has one value 1\n",
            "MEASURE_BY column only has one value 13474\n",
            "UPPER_LIMIT column only has one value 6.1\n",
            "TARGET_VALUE column only has one value 5.6\n",
            "LOWER_LIMIT column only has one value 5.1\n",
            "UNIT column only has one value MIL\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gO0l6t7kiLh3"
      },
      "source": [
        "# Drop值沒變化的跟時間欄位 \n",
        "data.drop('溢流水洗2上噴壓', axis=1, inplace=True)\n",
        "data.drop('溢流水洗2下噴壓', axis=1, inplace=True)\n",
        "data.drop('溢流水洗3上噴壓', axis=1, inplace=True)\n",
        "data.drop('溢流水洗4上噴壓', axis=1, inplace=True)\n",
        "data.drop('溢流水洗5上噴壓', axis=1, inplace=True)\n",
        "data.drop('退膜速度-設', axis=1, inplace=True)\n",
        "\n",
        "\n",
        "data.drop('serial_id', axis=1, inplace=True)\n",
        "data.drop('LAYER', axis=1, inplace=True)\n",
        "data.drop('COPPER_THICKNESS', axis=1, inplace=True)\n",
        "data.drop('MEASURE_BY', axis=1, inplace=True)\n",
        "data.drop('UNIT', axis=1, inplace=True)\n",
        "data.drop('MEASURE_NO', axis=1, inplace=True)\n",
        "data.drop('LOT', axis=1, inplace=True)\n",
        "data.drop('RESULT', axis=1, inplace=True)\n",
        "data.drop('PN', axis=1, inplace=True)\n",
        "\n",
        "data.drop('UPPER_LIMIT', axis=1, inplace=True)\n",
        "data.drop('LOWER_LIMIT', axis=1, inplace=True)\n",
        "data.drop('TARGET_VALUE', axis=1, inplace=True)\n",
        "#--------------- Drop時間欄位 ----------------\n",
        "# 時間是反推得到，較不準確\n",
        "# 準確後：\"END_MEASURE_TIME\" - \"START_MEASURE_TIME\" => 得到 processing_time\n",
        "data.drop('fetch_time', axis=1, inplace=True)\n",
        "data.drop('START_MEASURE_TIME', axis=1, inplace=True)\n",
        "data.drop('END_MEASURE_TIME', axis=1, inplace=True)\n",
        "data.drop('MEASURE_DATE', axis=1, inplace=True)\n",
        "data.drop('MEASURE_TIME', axis=1, inplace=True)"
      ],
      "execution_count": 98,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5X4dQk2wg2Sr"
      },
      "source": [
        "from datetime import datetime\n",
        "from scipy.stats import skew  # for some statistics\n",
        "from scipy.special import boxcox1p\n",
        "from scipy.stats import boxcox_normmax\n",
        "from sklearn.linear_model import ElasticNetCV, LassoCV, RidgeCV\n",
        "from sklearn.ensemble import GradientBoostingRegressor\n",
        "from sklearn.svm import SVR\n",
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.preprocessing import RobustScaler\n",
        "from sklearn.model_selection import KFold, cross_val_score\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from mlxtend.regressor import StackingCVRegressor\n",
        "from lightgbm import LGBMRegressor\n",
        "import matplotlib.pyplot as plt\n",
        "import scipy.stats as stats\n",
        "import sklearn.linear_model as linear_model\n",
        "import seaborn as sns\n",
        "from sklearn.manifold import TSNE\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.preprocessing import StandardScaler"
      ],
      "execution_count": 83,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 跑PCA(Optional)\n",
        "非常耗時間"
      ],
      "metadata": {
        "id": "DAHf6mKTORQs"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "id": "Nshb3NjPgNPa",
        "outputId": "54f519b0-cde3-4dce-90ab-9086b843870d"
      },
      "source": [
        "model = TSNE(n_components=2, random_state=0, perplexity=50)\n",
        "X = data.values\n",
        "tsne = model.fit_transform(X)\n",
        "\n",
        "std = StandardScaler()\n",
        "s = std.fit_transform(X)\n",
        "pca = PCA(n_components=30)\n",
        "pca.fit(s)\n",
        "pc = pca.transform(s)\n",
        "kmeans = KMeans(n_clusters=3)\n",
        "kmeans.fit(pc)\n",
        "\n",
        "fr = pd.DataFrame({'tsne1': tsne[:,0], 'tsne2': tsne[:, 1], 'cluster': kmeans.labels_})\n",
        "sns.lmplot(data=fr, x='tsne1', y='tsne2', hue='cluster', fit_reg=False)\n",
        "print(np.sum(pca.explained_variance_ratio_)) # 輸出保留的考解釋變異量"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.9556074508656811\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 402.375x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A_wvxdkWjotp"
      },
      "source": [
        "# Model Feature Selection"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.keys()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iuFzpPSlIc1j",
        "outputId": "b8728f45-b658-40fe-e4de-b0d57c1429da"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['退膜速度', '退膜-1溫度', '退膜-2溫度', '退膜1-上噴壓', '退膜1-下噴壓', '退膜2-上噴壓', '退膜2-下噴壓',\n",
              "       '加壓水洗1上噴壓', '加壓水洗1下噴壓', '搖擺高壓水洗', '加壓水洗2上噴壓', '加壓水洗2下噴壓', '加壓水洗3上噴壓',\n",
              "       '加壓水洗3下噴壓', '強風吹乾-1', '蝕刻速度', '蝕刻-1槽溫度', '蝕刻-2槽溫度', '射流泵-1', '射流泵-2',\n",
              "       '溢流水洗1上噴壓', '溢流水洗1下噴壓', '溢流水洗2上噴壓', '溢流水洗2下噴壓', '溢流水洗3上噴壓', '溢流水洗3下噴壓',\n",
              "       '溢流水洗4上噴壓', '溢流水洗4下噴壓', '溢流水洗5上噴壓', '溢流水洗5下噴壓', '溢流水洗6上噴壓', '溢流水洗6下噴壓',\n",
              "       '退錫速度', '除鈀槽溫度', '退錫槽溫度', '熱風吹乾溫度', '退錫A上噴壓', '退錫A下噴壓', '退錫B上噴壓',\n",
              "       '退錫B下噴壓', '溢流水洗7上噴壓', '溢流水洗7下噴壓', 'HFS水洗上噴壓', 'HFS水洗下噴壓', '加壓水洗5上噴壓',\n",
              "       '加壓水洗5下噴壓', '強風吹乾-2', '強風吹乾-3', '退膜速度-設', '蝕刻速度-設', '退錫速度-設', '蝕刻1噴壓-設',\n",
              "       '蝕刻2上噴壓-設', '蝕刻2下噴壓-設', 'MEASURE_TIME', 'MEASURE_ITEM'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2ESuYh0AjHqh"
      },
      "source": [
        "label_DF = pd.DataFrame(data, columns = [\"MEASURE_VALUE\"])\n",
        "data.drop('MEASURE_VALUE', axis=1, inplace=True)"
      ],
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dvrQL8wkjoDc"
      },
      "source": [
        "# RFE：依照選定的 esitimator，遞迴的刪除model認為不重要的column(ex: coefficient最低的)\n",
        "from sklearn.feature_selection import RFE\n",
        "from sklearn.svm import SVR\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "label_encoder = LabelEncoder()\n",
        "data['MEASURE_ITEM'] = label_encoder.fit_transform(data['MEASURE_ITEM'])\n",
        "\n",
        "estimator = SVR(kernel=\"linear\")\n",
        "selector = RFE(estimator, n_features_to_select=48, step=1)\n",
        "selector = selector.fit(data, label_DF)\n",
        "data = data.loc[:, data.columns[selector.support_]]\n",
        "data.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data['MEASURE_ITEM']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GyjxCljlHv2Q",
        "outputId": "c5ca326e-f17f-4982-a476-ec79353fbd27"
      },
      "execution_count": 63,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      0\n",
              "1      1\n",
              "2      2\n",
              "3      0\n",
              "4      1\n",
              "      ..\n",
              "292    1\n",
              "293    2\n",
              "294    0\n",
              "295    1\n",
              "296    2\n",
              "Name: MEASURE_ITEM, Length: 297, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "49H85DBrnXk4"
      },
      "source": [
        "# Use LightGBM "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0kjW-jAdjyOx"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import lightgbm as lgb\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bdPjxn31l87h"
      },
      "source": [
        "# Setting Search HyperParameters Grid(Optional)\n",
        "超參數自動最佳化，很耗時"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WOB9RPoxl151"
      },
      "source": [
        "!pip install optuna\n",
        "import optuna\n",
        "from lightgbm import LGBMRegressor\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.model_selection import StratifiedKFold"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iscJpcqspbjp",
        "outputId": "79a265aa-1c7b-40eb-c498-b7957e9eb77a"
      },
      "source": [
        "metrics.SCORERS.keys()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dict_keys(['explained_variance', 'r2', 'max_error', 'neg_median_absolute_error', 'neg_mean_absolute_error', 'neg_mean_absolute_percentage_error', 'neg_mean_squared_error', 'neg_mean_squared_log_error', 'neg_root_mean_squared_error', 'neg_mean_poisson_deviance', 'neg_mean_gamma_deviance', 'accuracy', 'top_k_accuracy', 'roc_auc', 'roc_auc_ovr', 'roc_auc_ovo', 'roc_auc_ovr_weighted', 'roc_auc_ovo_weighted', 'balanced_accuracy', 'average_precision', 'neg_log_loss', 'neg_brier_score', 'adjusted_rand_score', 'rand_score', 'homogeneity_score', 'completeness_score', 'v_measure_score', 'mutual_info_score', 'adjusted_mutual_info_score', 'normalized_mutual_info_score', 'fowlkes_mallows_score', 'precision', 'precision_macro', 'precision_micro', 'precision_samples', 'precision_weighted', 'recall', 'recall_macro', 'recall_micro', 'recall_samples', 'recall_weighted', 'f1', 'f1_macro', 'f1_micro', 'f1_samples', 'f1_weighted', 'jaccard', 'jaccard_macro', 'jaccard_micro', 'jaccard_samples', 'jaccard_weighted'])"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jGIqTl7dnNPS"
      },
      "source": [
        "from optuna.integration import LightGBMPruningCallback\n",
        "def objective(trial, data=data, y_train=label_DF):\n",
        "    param_grid = {\n",
        "        'metric': 'rmse', \n",
        "        #         \"device_type\": trial.suggest_categorical(\"device_type\", ['gpu']),\n",
        "        \"n_estimators\": trial.suggest_categorical(\"n_estimators\", [10000]),\n",
        "        \"learning_rate\": trial.suggest_float(\"learning_rate\", 0.01, 0.3),\n",
        "        \"num_leaves\": trial.suggest_int(\"num_leaves\", 20, 3000, step=20),\n",
        "        \"max_depth\": trial.suggest_int(\"max_depth\", 3, 12),\n",
        "        \"min_data_in_leaf\": trial.suggest_int(\"min_data_in_leaf\", 200, 10000, step=100),\n",
        "        \"max_bin\": trial.suggest_int(\"max_bin\", 200, 300),\n",
        "        \"lambda_l1\": trial.suggest_int(\"lambda_l1\", 0, 100, step=5),\n",
        "        \"lambda_l2\": trial.suggest_int(\"lambda_l2\", 0, 100, step=5),\n",
        "        \"min_gain_to_split\": trial.suggest_float(\"min_gain_to_split\", 0, 15),\n",
        "        \"bagging_fraction\": trial.suggest_float(\n",
        "            \"bagging_fraction\", 0.2, 0.95, step=0.1\n",
        "        ),\n",
        "        \"bagging_freq\": trial.suggest_categorical(\"bagging_freq\", [1]),\n",
        "        \"feature_fraction\": trial.suggest_float(\n",
        "            \"feature_fraction\", 0.2, 0.95, step=0.1\n",
        "        ),\n",
        "         }\n",
        "    #train_x, test_x, train_y, test_y\n",
        "    X_train, X_test, y_train, y_test = train_test_split(data, y_train, test_size=0.2,random_state=42)\n",
        "    model = LGBMRegressor(**param_grid)\n",
        "    model.fit(\n",
        "        X_train,\n",
        "        y_train,\n",
        "        eval_set=[(X_test, y_test)],\n",
        "        early_stopping_rounds=100,\n",
        "        \n",
        "    )\n",
        "    '''\n",
        "        callbacks=[\n",
        "            LightGBMPruningCallback(trial, \"l2\")\n",
        "        ],  # Add a pruning callback\n",
        "        '''\n",
        "    preds = model.predict(X_test)\n",
        "    #print(preds)\n",
        "    rmse = mean_squared_error(y_test, preds, squared=False)\n",
        "\n",
        "    return rmse"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p8wcj0aSnTba"
      },
      "source": [
        "study = optuna.create_study(direction='minimize')\n",
        "study.optimize(objective, n_trials=20)\n",
        "print('Number of finished trials:', len(study.trials))\n",
        "print('Best trial:', study.best_trial.params)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LLN60Mlens1Z"
      },
      "source": [
        "print(f\"\\tBest value (rmse): {study.best_value:.5f}\")\n",
        "print(f\"\\tBest params:\")\n",
        "\n",
        "for key, value in study.best_params.items():\n",
        "    print(f\"\\t\\t{key}: {value}\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 切資料集和設定超參數"
      ],
      "metadata": {
        "id": "gjk_Il8vPWGQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# parametes: stratify=data['MEASURE_ITEM']，根據 point1~3的類別數量均衡的sample到trainset, testset => \n",
        "x_train, x_test, y_train, y_test = train_test_split(data, label_DF, test_size=0.2, random_state=42, stratify=data['MEASURE_ITEM'])"
      ],
      "metadata": {
        "id": "HZj7w6kuPVDE"
      },
      "execution_count": 101,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "m3ZRvur4nX9_"
      },
      "source": [
        "'''\n",
        "{\n",
        "  'task': 'train',\n",
        "    'boosting_type': 'gbdt',\n",
        "    'objective': 'regression',\n",
        "    'metric': ['l2'],\n",
        "    'learning_rate': 0.003,\n",
        "    'feature_fraction': 0.9,\n",
        "    'bagging_fraction': 0.7,\n",
        "    'bagging_freq': 10,\n",
        "    'verbose': 0,\n",
        "    \"max_depth\": 8,\n",
        "    \"num_leaves\": 256,  \n",
        "    \"max_bin\": 512,\n",
        "    \"num_iterations\": 50000\n",
        "}\n",
        "\n",
        "\n",
        "{   \n",
        "    'n_estimators': 10000, \n",
        "    'learning_rate': 0.14046537637754686, \n",
        "    'num_leaves': 2640, 'max_depth': 11, \n",
        "    'min_data_in_leaf': 5400, 'max_bin': 289, \n",
        "    'lambda_l1': 20, 'lambda_l2': 50, \n",
        "    'min_gain_to_split': 7.416801721943241, \n",
        "    'bagging_fraction': 0.8, \n",
        "    'bagging_freq': 1, \n",
        "    'feature_fraction': 0.30000000000000004\n",
        "}\n",
        "'''\n",
        "# LGB\n",
        "hyper_params = {\n",
        "    'task': 'train',\n",
        "    'boosting_type': 'gbdt',\n",
        "    'objective': 'regression',\n",
        "    'metric': ['l2'],\n",
        "    'learning_rate': 0.005,\n",
        "    'feature_fraction': 1,\n",
        "    'bagging_fraction': 0.9,\n",
        "    'bagging_freq': 5,\n",
        "    'verbose': 0,\n",
        "    \"max_depth\": 5,\n",
        "    \"num_leaves\": 512,  \n",
        "    \"max_bin\": 128,\n",
        "    \"num_iterations\": 1000\n",
        "}"
      ],
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ML版控和效能紀錄(Optional)"
      ],
      "metadata": {
        "id": "Kez10h6fALj_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install wandb"
      ],
      "metadata": {
        "id": "o-dtPNxGOv8E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!wandb login"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wqSCId57PPj8",
        "outputId": "4af8ee47-0e96-46c9-8b75-7883269779de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: You can find your API key in your browser here: https://wandb.ai/authorize\n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: Paste an API key from your profile and hit enter, or press ctrl+c to quit: \n",
            "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import wandb\n",
        "wandb.init(\n",
        "  project=\"AllPoint\",\n",
        "  notes=\"tweak baseline\",\n",
        "  config=hyper_params,\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 109
        },
        "id": "8iFaYJh2PaC-",
        "outputId": "d7bdbeaf-4aab-4a7d-9257-47a2b7404561"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mlovegg\u001b[0m (use `wandb login --relogin` to force relogin)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Tracking run with wandb version 0.12.11"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Run data is saved locally in <code>/content/wandb/run-20220310_095400-2lhw0wab</code>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "Syncing run <strong><a href=\"https://wandb.ai/lovegg/AllPoint/runs/2lhw0wab\" target=\"_blank\">playful-sponge-1</a></strong> to <a href=\"https://wandb.ai/lovegg/AllPoint\" target=\"_blank\">Weights & Biases</a> (<a href=\"https://wandb.me/run\" target=\"_blank\">docs</a>)<br/>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<wandb.sdk.wandb_run.Run at 0x7fc6acc0b490>"
            ],
            "text/html": [
              "<button onClick=\"this.nextSibling.style.display='block';this.style.display='none';\">Display W&B run</button><iframe src=\"https://wandb.ai/lovegg/AllPoint/runs/2lhw0wab?jupyter=true\" style=\"border:none;width:100%;height:420px;display:none;\"></iframe>"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# LGB模型訓練"
      ],
      "metadata": {
        "id": "Wg1_RqYpPzUU"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vVbsGkHrnmOu"
      },
      "source": [
        "reg = lgb.LGBMRegressor(**hyper_params)\n",
        "#scores = cross_val_score(gbm, data, label_DF, cv=5, scoring='neg_mean_squared_error')"
      ],
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IqALKyPOsWEd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d8e870be-b809-4b4c-f36c-8411da8f583b"
      },
      "source": [
        "from timeit import default_timer as timer\n",
        "\n",
        "start = timer()\n",
        "reg.fit(x_train, y_train,\n",
        "    eval_set=[(x_test, y_test)],\n",
        "    eval_metric='l2',\n",
        "    early_stopping_rounds=1000)\n",
        "end = timer()\n",
        "print(end - start)\n",
        "#wandb.sklearn.plot_regressor(clf, list(x_train), list(x_test), list(y_train), list(y_test),  model_name='AllPoint')"
      ],
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/lightgbm/engine.py:118: UserWarning: Found `num_iterations` in params. Will use it instead of argument\n",
            "  warnings.warn(\"Found `{}` in params. Will use it instead of argument\".format(alias))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1]\tvalid_0's l2: 0.0482931\n",
            "Training until validation scores don't improve for 1000 rounds.\n",
            "[2]\tvalid_0's l2: 0.047806\n",
            "[3]\tvalid_0's l2: 0.0473231\n",
            "[4]\tvalid_0's l2: 0.046846\n",
            "[5]\tvalid_0's l2: 0.0463737\n",
            "[6]\tvalid_0's l2: 0.0459149\n",
            "[7]\tvalid_0's l2: 0.0454607\n",
            "[8]\tvalid_0's l2: 0.0450199\n",
            "[9]\tvalid_0's l2: 0.0445764\n",
            "[10]\tvalid_0's l2: 0.0441358\n",
            "[11]\tvalid_0's l2: 0.0437054\n",
            "[12]\tvalid_0's l2: 0.0432793\n",
            "[13]\tvalid_0's l2: 0.042857\n",
            "[14]\tvalid_0's l2: 0.0424394\n",
            "[15]\tvalid_0's l2: 0.0420255\n",
            "[16]\tvalid_0's l2: 0.041622\n",
            "[17]\tvalid_0's l2: 0.0412225\n",
            "[18]\tvalid_0's l2: 0.040827\n",
            "[19]\tvalid_0's l2: 0.0404343\n",
            "[20]\tvalid_0's l2: 0.0400499\n",
            "[21]\tvalid_0's l2: 0.0396773\n",
            "[22]\tvalid_0's l2: 0.0393084\n",
            "[23]\tvalid_0's l2: 0.0389456\n",
            "[24]\tvalid_0's l2: 0.0385871\n",
            "[25]\tvalid_0's l2: 0.03823\n",
            "[26]\tvalid_0's l2: 0.0378513\n",
            "[27]\tvalid_0's l2: 0.0374765\n",
            "[28]\tvalid_0's l2: 0.0371054\n",
            "[29]\tvalid_0's l2: 0.036738\n",
            "[30]\tvalid_0's l2: 0.0363744\n",
            "[31]\tvalid_0's l2: 0.0360257\n",
            "[32]\tvalid_0's l2: 0.0356805\n",
            "[33]\tvalid_0's l2: 0.035337\n",
            "[34]\tvalid_0's l2: 0.035\n",
            "[35]\tvalid_0's l2: 0.0346634\n",
            "[36]\tvalid_0's l2: 0.0343169\n",
            "[37]\tvalid_0's l2: 0.0339739\n",
            "[38]\tvalid_0's l2: 0.0336345\n",
            "[39]\tvalid_0's l2: 0.0332974\n",
            "[40]\tvalid_0's l2: 0.0329665\n",
            "[41]\tvalid_0's l2: 0.0326455\n",
            "[42]\tvalid_0's l2: 0.0323306\n",
            "[43]\tvalid_0's l2: 0.032016\n",
            "[44]\tvalid_0's l2: 0.0317073\n",
            "[45]\tvalid_0's l2: 0.031399\n",
            "[46]\tvalid_0's l2: 0.0310865\n",
            "[47]\tvalid_0's l2: 0.0307759\n",
            "[48]\tvalid_0's l2: 0.0304685\n",
            "[49]\tvalid_0's l2: 0.0301642\n",
            "[50]\tvalid_0's l2: 0.0298642\n",
            "[51]\tvalid_0's l2: 0.0295731\n",
            "[52]\tvalid_0's l2: 0.0292849\n",
            "[53]\tvalid_0's l2: 0.0289996\n",
            "[54]\tvalid_0's l2: 0.0287127\n",
            "[55]\tvalid_0's l2: 0.0284287\n",
            "[56]\tvalid_0's l2: 0.028153\n",
            "[57]\tvalid_0's l2: 0.0278801\n",
            "[58]\tvalid_0's l2: 0.0276054\n",
            "[59]\tvalid_0's l2: 0.0273384\n",
            "[60]\tvalid_0's l2: 0.0270692\n",
            "[61]\tvalid_0's l2: 0.0268021\n",
            "[62]\tvalid_0's l2: 0.0265377\n",
            "[63]\tvalid_0's l2: 0.026276\n",
            "[64]\tvalid_0's l2: 0.026017\n",
            "[65]\tvalid_0's l2: 0.0257606\n",
            "[66]\tvalid_0's l2: 0.0255024\n",
            "[67]\tvalid_0's l2: 0.0252468\n",
            "[68]\tvalid_0's l2: 0.0249935\n",
            "[69]\tvalid_0's l2: 0.0247429\n",
            "[70]\tvalid_0's l2: 0.0244961\n",
            "[71]\tvalid_0's l2: 0.0242642\n",
            "[72]\tvalid_0's l2: 0.0240346\n",
            "[73]\tvalid_0's l2: 0.0238074\n",
            "[74]\tvalid_0's l2: 0.0235804\n",
            "[75]\tvalid_0's l2: 0.0233576\n",
            "[76]\tvalid_0's l2: 0.0231429\n",
            "[77]\tvalid_0's l2: 0.0229304\n",
            "[78]\tvalid_0's l2: 0.02272\n",
            "[79]\tvalid_0's l2: 0.0225115\n",
            "[80]\tvalid_0's l2: 0.0223052\n",
            "[81]\tvalid_0's l2: 0.0220931\n",
            "[82]\tvalid_0's l2: 0.0218827\n",
            "[83]\tvalid_0's l2: 0.021667\n",
            "[84]\tvalid_0's l2: 0.0214536\n",
            "[85]\tvalid_0's l2: 0.0212493\n",
            "[86]\tvalid_0's l2: 0.0210421\n",
            "[87]\tvalid_0's l2: 0.020837\n",
            "[88]\tvalid_0's l2: 0.020634\n",
            "[89]\tvalid_0's l2: 0.0204345\n",
            "[90]\tvalid_0's l2: 0.0202371\n",
            "[91]\tvalid_0's l2: 0.0200481\n",
            "[92]\tvalid_0's l2: 0.019861\n",
            "[93]\tvalid_0's l2: 0.0196757\n",
            "[94]\tvalid_0's l2: 0.0194923\n",
            "[95]\tvalid_0's l2: 0.0193139\n",
            "[96]\tvalid_0's l2: 0.0191248\n",
            "[97]\tvalid_0's l2: 0.0189375\n",
            "[98]\tvalid_0's l2: 0.0187522\n",
            "[99]\tvalid_0's l2: 0.0185688\n",
            "[100]\tvalid_0's l2: 0.0183872\n",
            "[101]\tvalid_0's l2: 0.0182104\n",
            "[102]\tvalid_0's l2: 0.0180353\n",
            "[103]\tvalid_0's l2: 0.0178607\n",
            "[104]\tvalid_0's l2: 0.0176877\n",
            "[105]\tvalid_0's l2: 0.0175166\n",
            "[106]\tvalid_0's l2: 0.0173548\n",
            "[107]\tvalid_0's l2: 0.0171946\n",
            "[108]\tvalid_0's l2: 0.017036\n",
            "[109]\tvalid_0's l2: 0.0168741\n",
            "[110]\tvalid_0's l2: 0.0167186\n",
            "[111]\tvalid_0's l2: 0.0165675\n",
            "[112]\tvalid_0's l2: 0.0164178\n",
            "[113]\tvalid_0's l2: 0.0162687\n",
            "[114]\tvalid_0's l2: 0.016122\n",
            "[115]\tvalid_0's l2: 0.0159767\n",
            "[116]\tvalid_0's l2: 0.0158225\n",
            "[117]\tvalid_0's l2: 0.0156693\n",
            "[118]\tvalid_0's l2: 0.0155177\n",
            "[119]\tvalid_0's l2: 0.0153678\n",
            "[120]\tvalid_0's l2: 0.01522\n",
            "[121]\tvalid_0's l2: 0.0150842\n",
            "[122]\tvalid_0's l2: 0.0149498\n",
            "[123]\tvalid_0's l2: 0.0148167\n",
            "[124]\tvalid_0's l2: 0.014685\n",
            "[125]\tvalid_0's l2: 0.0145545\n",
            "[126]\tvalid_0's l2: 0.0144142\n",
            "[127]\tvalid_0's l2: 0.0142746\n",
            "[128]\tvalid_0's l2: 0.0141372\n",
            "[129]\tvalid_0's l2: 0.0140006\n",
            "[130]\tvalid_0's l2: 0.0138664\n",
            "[131]\tvalid_0's l2: 0.0137328\n",
            "[132]\tvalid_0's l2: 0.0136006\n",
            "[133]\tvalid_0's l2: 0.0134698\n",
            "[134]\tvalid_0's l2: 0.0133404\n",
            "[135]\tvalid_0's l2: 0.0132124\n",
            "[136]\tvalid_0's l2: 0.0130898\n",
            "[137]\tvalid_0's l2: 0.0129685\n",
            "[138]\tvalid_0's l2: 0.0128484\n",
            "[139]\tvalid_0's l2: 0.0127295\n",
            "[140]\tvalid_0's l2: 0.0126118\n",
            "[141]\tvalid_0's l2: 0.0124972\n",
            "[142]\tvalid_0's l2: 0.0123838\n",
            "[143]\tvalid_0's l2: 0.0122712\n",
            "[144]\tvalid_0's l2: 0.0121602\n",
            "[145]\tvalid_0's l2: 0.0120499\n",
            "[146]\tvalid_0's l2: 0.0119373\n",
            "[147]\tvalid_0's l2: 0.011826\n",
            "[148]\tvalid_0's l2: 0.0117157\n",
            "[149]\tvalid_0's l2: 0.0116066\n",
            "[150]\tvalid_0's l2: 0.0114986\n",
            "[151]\tvalid_0's l2: 0.011397\n",
            "[152]\tvalid_0's l2: 0.0112964\n",
            "[153]\tvalid_0's l2: 0.0111968\n",
            "[154]\tvalid_0's l2: 0.0110982\n",
            "[155]\tvalid_0's l2: 0.0110006\n",
            "[156]\tvalid_0's l2: 0.0109082\n",
            "[157]\tvalid_0's l2: 0.0108166\n",
            "[158]\tvalid_0's l2: 0.010726\n",
            "[159]\tvalid_0's l2: 0.0106347\n",
            "[160]\tvalid_0's l2: 0.0105431\n",
            "[161]\tvalid_0's l2: 0.0104403\n",
            "[162]\tvalid_0's l2: 0.0103386\n",
            "[163]\tvalid_0's l2: 0.0102379\n",
            "[164]\tvalid_0's l2: 0.0101384\n",
            "[165]\tvalid_0's l2: 0.0100397\n",
            "[166]\tvalid_0's l2: 0.0099526\n",
            "[167]\tvalid_0's l2: 0.00986559\n",
            "[168]\tvalid_0's l2: 0.00978022\n",
            "[169]\tvalid_0's l2: 0.00969493\n",
            "[170]\tvalid_0's l2: 0.00961043\n",
            "[171]\tvalid_0's l2: 0.00952623\n",
            "[172]\tvalid_0's l2: 0.00944287\n",
            "[173]\tvalid_0's l2: 0.00936032\n",
            "[174]\tvalid_0's l2: 0.0092786\n",
            "[175]\tvalid_0's l2: 0.00919757\n",
            "[176]\tvalid_0's l2: 0.00911378\n",
            "[177]\tvalid_0's l2: 0.00903083\n",
            "[178]\tvalid_0's l2: 0.00894872\n",
            "[179]\tvalid_0's l2: 0.00886731\n",
            "[180]\tvalid_0's l2: 0.00878686\n",
            "[181]\tvalid_0's l2: 0.00870958\n",
            "[182]\tvalid_0's l2: 0.00863308\n",
            "[183]\tvalid_0's l2: 0.00855736\n",
            "[184]\tvalid_0's l2: 0.00848239\n",
            "[185]\tvalid_0's l2: 0.00840838\n",
            "[186]\tvalid_0's l2: 0.00833296\n",
            "[187]\tvalid_0's l2: 0.00825831\n",
            "[188]\tvalid_0's l2: 0.00818441\n",
            "[189]\tvalid_0's l2: 0.00811127\n",
            "[190]\tvalid_0's l2: 0.00803887\n",
            "[191]\tvalid_0's l2: 0.00797082\n",
            "[192]\tvalid_0's l2: 0.00790333\n",
            "[193]\tvalid_0's l2: 0.00783757\n",
            "[194]\tvalid_0's l2: 0.00777152\n",
            "[195]\tvalid_0's l2: 0.00770426\n",
            "[196]\tvalid_0's l2: 0.00763509\n",
            "[197]\tvalid_0's l2: 0.00756663\n",
            "[198]\tvalid_0's l2: 0.00749886\n",
            "[199]\tvalid_0's l2: 0.00743177\n",
            "[200]\tvalid_0's l2: 0.00736546\n",
            "[201]\tvalid_0's l2: 0.0072979\n",
            "[202]\tvalid_0's l2: 0.00723355\n",
            "[203]\tvalid_0's l2: 0.00716986\n",
            "[204]\tvalid_0's l2: 0.00710438\n",
            "[205]\tvalid_0's l2: 0.00704199\n",
            "[206]\tvalid_0's l2: 0.00698179\n",
            "[207]\tvalid_0's l2: 0.00692257\n",
            "[208]\tvalid_0's l2: 0.00686395\n",
            "[209]\tvalid_0's l2: 0.00680557\n",
            "[210]\tvalid_0's l2: 0.00674812\n",
            "[211]\tvalid_0's l2: 0.00668267\n",
            "[212]\tvalid_0's l2: 0.0066179\n",
            "[213]\tvalid_0's l2: 0.00655383\n",
            "[214]\tvalid_0's l2: 0.00649042\n",
            "[215]\tvalid_0's l2: 0.00642769\n",
            "[216]\tvalid_0's l2: 0.00636883\n",
            "[217]\tvalid_0's l2: 0.00631058\n",
            "[218]\tvalid_0's l2: 0.00625301\n",
            "[219]\tvalid_0's l2: 0.00619587\n",
            "[220]\tvalid_0's l2: 0.00613938\n",
            "[221]\tvalid_0's l2: 0.00608698\n",
            "[222]\tvalid_0's l2: 0.00603513\n",
            "[223]\tvalid_0's l2: 0.00598346\n",
            "[224]\tvalid_0's l2: 0.00593241\n",
            "[225]\tvalid_0's l2: 0.00588211\n",
            "[226]\tvalid_0's l2: 0.00583125\n",
            "[227]\tvalid_0's l2: 0.0057809\n",
            "[228]\tvalid_0's l2: 0.00573111\n",
            "[229]\tvalid_0's l2: 0.00568209\n",
            "[230]\tvalid_0's l2: 0.00563419\n",
            "[231]\tvalid_0's l2: 0.00558774\n",
            "[232]\tvalid_0's l2: 0.00554176\n",
            "[233]\tvalid_0's l2: 0.00549624\n",
            "[234]\tvalid_0's l2: 0.0054457\n",
            "[235]\tvalid_0's l2: 0.00539569\n",
            "[236]\tvalid_0's l2: 0.00535115\n",
            "[237]\tvalid_0's l2: 0.00530706\n",
            "[238]\tvalid_0's l2: 0.00526343\n",
            "[239]\tvalid_0's l2: 0.00521914\n",
            "[240]\tvalid_0's l2: 0.00517531\n",
            "[241]\tvalid_0's l2: 0.00512837\n",
            "[242]\tvalid_0's l2: 0.00508192\n",
            "[243]\tvalid_0's l2: 0.00503596\n",
            "[244]\tvalid_0's l2: 0.00499047\n",
            "[245]\tvalid_0's l2: 0.00494546\n",
            "[246]\tvalid_0's l2: 0.0049013\n",
            "[247]\tvalid_0's l2: 0.0048576\n",
            "[248]\tvalid_0's l2: 0.00481435\n",
            "[249]\tvalid_0's l2: 0.00477155\n",
            "[250]\tvalid_0's l2: 0.0047292\n",
            "[251]\tvalid_0's l2: 0.00468687\n",
            "[252]\tvalid_0's l2: 0.00464499\n",
            "[253]\tvalid_0's l2: 0.00460354\n",
            "[254]\tvalid_0's l2: 0.00456252\n",
            "[255]\tvalid_0's l2: 0.00452193\n",
            "[256]\tvalid_0's l2: 0.0044822\n",
            "[257]\tvalid_0's l2: 0.00444287\n",
            "[258]\tvalid_0's l2: 0.00440396\n",
            "[259]\tvalid_0's l2: 0.00436545\n",
            "[260]\tvalid_0's l2: 0.00432734\n",
            "[261]\tvalid_0's l2: 0.00429148\n",
            "[262]\tvalid_0's l2: 0.00425599\n",
            "[263]\tvalid_0's l2: 0.00422078\n",
            "[264]\tvalid_0's l2: 0.00418603\n",
            "[265]\tvalid_0's l2: 0.00415154\n",
            "[266]\tvalid_0's l2: 0.00411718\n",
            "[267]\tvalid_0's l2: 0.00408341\n",
            "[268]\tvalid_0's l2: 0.00404968\n",
            "[269]\tvalid_0's l2: 0.0040166\n",
            "[270]\tvalid_0's l2: 0.00398357\n",
            "[271]\tvalid_0's l2: 0.00394923\n",
            "[272]\tvalid_0's l2: 0.00391525\n",
            "[273]\tvalid_0's l2: 0.00388153\n",
            "[274]\tvalid_0's l2: 0.00384823\n",
            "[275]\tvalid_0's l2: 0.00381514\n",
            "[276]\tvalid_0's l2: 0.00378279\n",
            "[277]\tvalid_0's l2: 0.00375023\n",
            "[278]\tvalid_0's l2: 0.00371852\n",
            "[279]\tvalid_0's l2: 0.00368717\n",
            "[280]\tvalid_0's l2: 0.00365561\n",
            "[281]\tvalid_0's l2: 0.00362682\n",
            "[282]\tvalid_0's l2: 0.00359832\n",
            "[283]\tvalid_0's l2: 0.00357012\n",
            "[284]\tvalid_0's l2: 0.0035422\n",
            "[285]\tvalid_0's l2: 0.00351452\n",
            "[286]\tvalid_0's l2: 0.00348544\n",
            "[287]\tvalid_0's l2: 0.00345656\n",
            "[288]\tvalid_0's l2: 0.00342808\n",
            "[289]\tvalid_0's l2: 0.0033998\n",
            "[290]\tvalid_0's l2: 0.00337192\n",
            "[291]\tvalid_0's l2: 0.0033481\n",
            "[292]\tvalid_0's l2: 0.0033245\n",
            "[293]\tvalid_0's l2: 0.00330014\n",
            "[294]\tvalid_0's l2: 0.00327612\n",
            "[295]\tvalid_0's l2: 0.00325321\n",
            "[296]\tvalid_0's l2: 0.00322656\n",
            "[297]\tvalid_0's l2: 0.00320018\n",
            "[298]\tvalid_0's l2: 0.00317406\n",
            "[299]\tvalid_0's l2: 0.00314822\n",
            "[300]\tvalid_0's l2: 0.00312265\n",
            "[301]\tvalid_0's l2: 0.00309848\n",
            "[302]\tvalid_0's l2: 0.00307457\n",
            "[303]\tvalid_0's l2: 0.00305089\n",
            "[304]\tvalid_0's l2: 0.0030273\n",
            "[305]\tvalid_0's l2: 0.0030041\n",
            "[306]\tvalid_0's l2: 0.00298206\n",
            "[307]\tvalid_0's l2: 0.00296025\n",
            "[308]\tvalid_0's l2: 0.00293865\n",
            "[309]\tvalid_0's l2: 0.00291733\n",
            "[310]\tvalid_0's l2: 0.00289618\n",
            "[311]\tvalid_0's l2: 0.00287186\n",
            "[312]\tvalid_0's l2: 0.00284772\n",
            "[313]\tvalid_0's l2: 0.00282393\n",
            "[314]\tvalid_0's l2: 0.0028004\n",
            "[315]\tvalid_0's l2: 0.00277704\n",
            "[316]\tvalid_0's l2: 0.00275762\n",
            "[317]\tvalid_0's l2: 0.00273836\n",
            "[318]\tvalid_0's l2: 0.00271933\n",
            "[319]\tvalid_0's l2: 0.00270045\n",
            "[320]\tvalid_0's l2: 0.00268177\n",
            "[321]\tvalid_0's l2: 0.00266319\n",
            "[322]\tvalid_0's l2: 0.00264504\n",
            "[323]\tvalid_0's l2: 0.00262683\n",
            "[324]\tvalid_0's l2: 0.00260889\n",
            "[325]\tvalid_0's l2: 0.00259116\n",
            "[326]\tvalid_0's l2: 0.00257336\n",
            "[327]\tvalid_0's l2: 0.00255575\n",
            "[328]\tvalid_0's l2: 0.00253833\n",
            "[329]\tvalid_0's l2: 0.00252136\n",
            "[330]\tvalid_0's l2: 0.00250457\n",
            "[331]\tvalid_0's l2: 0.00248512\n",
            "[332]\tvalid_0's l2: 0.00246587\n",
            "[333]\tvalid_0's l2: 0.00244683\n",
            "[334]\tvalid_0's l2: 0.00242799\n",
            "[335]\tvalid_0's l2: 0.00240935\n",
            "[336]\tvalid_0's l2: 0.00239142\n",
            "[337]\tvalid_0's l2: 0.00237368\n",
            "[338]\tvalid_0's l2: 0.00235613\n",
            "[339]\tvalid_0's l2: 0.00233883\n",
            "[340]\tvalid_0's l2: 0.00232171\n",
            "[341]\tvalid_0's l2: 0.0023048\n",
            "[342]\tvalid_0's l2: 0.00228807\n",
            "[343]\tvalid_0's l2: 0.00227151\n",
            "[344]\tvalid_0's l2: 0.00225513\n",
            "[345]\tvalid_0's l2: 0.00223906\n",
            "[346]\tvalid_0's l2: 0.00222188\n",
            "[347]\tvalid_0's l2: 0.00220489\n",
            "[348]\tvalid_0's l2: 0.00218809\n",
            "[349]\tvalid_0's l2: 0.00217145\n",
            "[350]\tvalid_0's l2: 0.002155\n",
            "[351]\tvalid_0's l2: 0.00214049\n",
            "[352]\tvalid_0's l2: 0.00212613\n",
            "[353]\tvalid_0's l2: 0.00211193\n",
            "[354]\tvalid_0's l2: 0.00209787\n",
            "[355]\tvalid_0's l2: 0.00208396\n",
            "[356]\tvalid_0's l2: 0.00206935\n",
            "[357]\tvalid_0's l2: 0.00205489\n",
            "[358]\tvalid_0's l2: 0.00204058\n",
            "[359]\tvalid_0's l2: 0.00202653\n",
            "[360]\tvalid_0's l2: 0.00201262\n",
            "[361]\tvalid_0's l2: 0.00200073\n",
            "[362]\tvalid_0's l2: 0.00198896\n",
            "[363]\tvalid_0's l2: 0.0019772\n",
            "[364]\tvalid_0's l2: 0.00196566\n",
            "[365]\tvalid_0's l2: 0.00195413\n",
            "[366]\tvalid_0's l2: 0.00194128\n",
            "[367]\tvalid_0's l2: 0.00192856\n",
            "[368]\tvalid_0's l2: 0.00191598\n",
            "[369]\tvalid_0's l2: 0.00190354\n",
            "[370]\tvalid_0's l2: 0.00189129\n",
            "[371]\tvalid_0's l2: 0.00188032\n",
            "[372]\tvalid_0's l2: 0.00186948\n",
            "[373]\tvalid_0's l2: 0.00185874\n",
            "[374]\tvalid_0's l2: 0.00184811\n",
            "[375]\tvalid_0's l2: 0.0018376\n",
            "[376]\tvalid_0's l2: 0.00182515\n",
            "[377]\tvalid_0's l2: 0.00181285\n",
            "[378]\tvalid_0's l2: 0.00180067\n",
            "[379]\tvalid_0's l2: 0.00178865\n",
            "[380]\tvalid_0's l2: 0.00177674\n",
            "[381]\tvalid_0's l2: 0.001766\n",
            "[382]\tvalid_0's l2: 0.00175538\n",
            "[383]\tvalid_0's l2: 0.00174486\n",
            "[384]\tvalid_0's l2: 0.00173446\n",
            "[385]\tvalid_0's l2: 0.00172417\n",
            "[386]\tvalid_0's l2: 0.00171369\n",
            "[387]\tvalid_0's l2: 0.00170332\n",
            "[388]\tvalid_0's l2: 0.00169306\n",
            "[389]\tvalid_0's l2: 0.00168291\n",
            "[390]\tvalid_0's l2: 0.00167287\n",
            "[391]\tvalid_0's l2: 0.00166445\n",
            "[392]\tvalid_0's l2: 0.00165611\n",
            "[393]\tvalid_0's l2: 0.00164764\n",
            "[394]\tvalid_0's l2: 0.00163946\n",
            "[395]\tvalid_0's l2: 0.00163117\n",
            "[396]\tvalid_0's l2: 0.00162037\n",
            "[397]\tvalid_0's l2: 0.0016097\n",
            "[398]\tvalid_0's l2: 0.00159916\n",
            "[399]\tvalid_0's l2: 0.0015891\n",
            "[400]\tvalid_0's l2: 0.00157885\n",
            "[401]\tvalid_0's l2: 0.00156993\n",
            "[402]\tvalid_0's l2: 0.00156104\n",
            "[403]\tvalid_0's l2: 0.00155232\n",
            "[404]\tvalid_0's l2: 0.00154373\n",
            "[405]\tvalid_0's l2: 0.00153513\n",
            "[406]\tvalid_0's l2: 0.00152698\n",
            "[407]\tvalid_0's l2: 0.00151891\n",
            "[408]\tvalid_0's l2: 0.00151093\n",
            "[409]\tvalid_0's l2: 0.00150304\n",
            "[410]\tvalid_0's l2: 0.00149523\n",
            "[411]\tvalid_0's l2: 0.00148688\n",
            "[412]\tvalid_0's l2: 0.00147862\n",
            "[413]\tvalid_0's l2: 0.00147046\n",
            "[414]\tvalid_0's l2: 0.00146238\n",
            "[415]\tvalid_0's l2: 0.0014544\n",
            "[416]\tvalid_0's l2: 0.00144615\n",
            "[417]\tvalid_0's l2: 0.001438\n",
            "[418]\tvalid_0's l2: 0.00142994\n",
            "[419]\tvalid_0's l2: 0.00142197\n",
            "[420]\tvalid_0's l2: 0.00141409\n",
            "[421]\tvalid_0's l2: 0.00140673\n",
            "[422]\tvalid_0's l2: 0.00139945\n",
            "[423]\tvalid_0's l2: 0.00139225\n",
            "[424]\tvalid_0's l2: 0.00138514\n",
            "[425]\tvalid_0's l2: 0.00137811\n",
            "[426]\tvalid_0's l2: 0.00137242\n",
            "[427]\tvalid_0's l2: 0.00136666\n",
            "[428]\tvalid_0's l2: 0.0013609\n",
            "[429]\tvalid_0's l2: 0.00135538\n",
            "[430]\tvalid_0's l2: 0.00134973\n",
            "[431]\tvalid_0's l2: 0.00134457\n",
            "[432]\tvalid_0's l2: 0.00133946\n",
            "[433]\tvalid_0's l2: 0.0013344\n",
            "[434]\tvalid_0's l2: 0.0013294\n",
            "[435]\tvalid_0's l2: 0.00132445\n",
            "[436]\tvalid_0's l2: 0.00131851\n",
            "[437]\tvalid_0's l2: 0.00131264\n",
            "[438]\tvalid_0's l2: 0.00130683\n",
            "[439]\tvalid_0's l2: 0.00130109\n",
            "[440]\tvalid_0's l2: 0.00129542\n",
            "[441]\tvalid_0's l2: 0.00129061\n",
            "[442]\tvalid_0's l2: 0.00128569\n",
            "[443]\tvalid_0's l2: 0.00128081\n",
            "[444]\tvalid_0's l2: 0.00127599\n",
            "[445]\tvalid_0's l2: 0.00127139\n",
            "[446]\tvalid_0's l2: 0.00126619\n",
            "[447]\tvalid_0's l2: 0.00126081\n",
            "[448]\tvalid_0's l2: 0.00125549\n",
            "[449]\tvalid_0's l2: 0.00125022\n",
            "[450]\tvalid_0's l2: 0.00124503\n",
            "[451]\tvalid_0's l2: 0.0012396\n",
            "[452]\tvalid_0's l2: 0.00123422\n",
            "[453]\tvalid_0's l2: 0.00122891\n",
            "[454]\tvalid_0's l2: 0.00122366\n",
            "[455]\tvalid_0's l2: 0.00121842\n",
            "[456]\tvalid_0's l2: 0.00121344\n",
            "[457]\tvalid_0's l2: 0.0012085\n",
            "[458]\tvalid_0's l2: 0.00120362\n",
            "[459]\tvalid_0's l2: 0.00119879\n",
            "[460]\tvalid_0's l2: 0.00119401\n",
            "[461]\tvalid_0's l2: 0.00118955\n",
            "[462]\tvalid_0's l2: 0.00118514\n",
            "[463]\tvalid_0's l2: 0.00118078\n",
            "[464]\tvalid_0's l2: 0.00117646\n",
            "[465]\tvalid_0's l2: 0.00117242\n",
            "[466]\tvalid_0's l2: 0.00116818\n",
            "[467]\tvalid_0's l2: 0.00116399\n",
            "[468]\tvalid_0's l2: 0.00115984\n",
            "[469]\tvalid_0's l2: 0.00115573\n",
            "[470]\tvalid_0's l2: 0.00115172\n",
            "[471]\tvalid_0's l2: 0.00114798\n",
            "[472]\tvalid_0's l2: 0.00114425\n",
            "[473]\tvalid_0's l2: 0.00114061\n",
            "[474]\tvalid_0's l2: 0.00113699\n",
            "[475]\tvalid_0's l2: 0.00113341\n",
            "[476]\tvalid_0's l2: 0.00112915\n",
            "[477]\tvalid_0's l2: 0.00112494\n",
            "[478]\tvalid_0's l2: 0.00112077\n",
            "[479]\tvalid_0's l2: 0.00111665\n",
            "[480]\tvalid_0's l2: 0.00111257\n",
            "[481]\tvalid_0's l2: 0.00110865\n",
            "[482]\tvalid_0's l2: 0.00110477\n",
            "[483]\tvalid_0's l2: 0.00110093\n",
            "[484]\tvalid_0's l2: 0.00109714\n",
            "[485]\tvalid_0's l2: 0.00109339\n",
            "[486]\tvalid_0's l2: 0.00108921\n",
            "[487]\tvalid_0's l2: 0.00108508\n",
            "[488]\tvalid_0's l2: 0.001081\n",
            "[489]\tvalid_0's l2: 0.00107696\n",
            "[490]\tvalid_0's l2: 0.00107298\n",
            "[491]\tvalid_0's l2: 0.0010692\n",
            "[492]\tvalid_0's l2: 0.00106543\n",
            "[493]\tvalid_0's l2: 0.00106171\n",
            "[494]\tvalid_0's l2: 0.00105803\n",
            "[495]\tvalid_0's l2: 0.00105439\n",
            "[496]\tvalid_0's l2: 0.00105145\n",
            "[497]\tvalid_0's l2: 0.00104853\n",
            "[498]\tvalid_0's l2: 0.00104533\n",
            "[499]\tvalid_0's l2: 0.0010423\n",
            "[500]\tvalid_0's l2: 0.00103916\n",
            "[501]\tvalid_0's l2: 0.00103635\n",
            "[502]\tvalid_0's l2: 0.00103357\n",
            "[503]\tvalid_0's l2: 0.00103083\n",
            "[504]\tvalid_0's l2: 0.00102811\n",
            "[505]\tvalid_0's l2: 0.0010254\n",
            "[506]\tvalid_0's l2: 0.0010223\n",
            "[507]\tvalid_0's l2: 0.00101923\n",
            "[508]\tvalid_0's l2: 0.00101625\n",
            "[509]\tvalid_0's l2: 0.00101324\n",
            "[510]\tvalid_0's l2: 0.00101032\n",
            "[511]\tvalid_0's l2: 0.00100732\n",
            "[512]\tvalid_0's l2: 0.00100435\n",
            "[513]\tvalid_0's l2: 0.00100142\n",
            "[514]\tvalid_0's l2: 0.000998519\n",
            "[515]\tvalid_0's l2: 0.000995655\n",
            "[516]\tvalid_0's l2: 0.000993089\n",
            "[517]\tvalid_0's l2: 0.000990428\n",
            "[518]\tvalid_0's l2: 0.000987924\n",
            "[519]\tvalid_0's l2: 0.000985325\n",
            "[520]\tvalid_0's l2: 0.000982834\n",
            "[521]\tvalid_0's l2: 0.000980023\n",
            "[522]\tvalid_0's l2: 0.000977247\n",
            "[523]\tvalid_0's l2: 0.000974505\n",
            "[524]\tvalid_0's l2: 0.000971796\n",
            "[525]\tvalid_0's l2: 0.000969124\n",
            "[526]\tvalid_0's l2: 0.000966531\n",
            "[527]\tvalid_0's l2: 0.00096397\n",
            "[528]\tvalid_0's l2: 0.00096144\n",
            "[529]\tvalid_0's l2: 0.000958926\n",
            "[530]\tvalid_0's l2: 0.000956442\n",
            "[531]\tvalid_0's l2: 0.0009541\n",
            "[532]\tvalid_0's l2: 0.000951786\n",
            "[533]\tvalid_0's l2: 0.000949501\n",
            "[534]\tvalid_0's l2: 0.000947245\n",
            "[535]\tvalid_0's l2: 0.000945016\n",
            "[536]\tvalid_0's l2: 0.000942854\n",
            "[537]\tvalid_0's l2: 0.000940715\n",
            "[538]\tvalid_0's l2: 0.000938596\n",
            "[539]\tvalid_0's l2: 0.0009365\n",
            "[540]\tvalid_0's l2: 0.000934432\n",
            "[541]\tvalid_0's l2: 0.000932654\n",
            "[542]\tvalid_0's l2: 0.000930893\n",
            "[543]\tvalid_0's l2: 0.00092915\n",
            "[544]\tvalid_0's l2: 0.00092741\n",
            "[545]\tvalid_0's l2: 0.0009257\n",
            "[546]\tvalid_0's l2: 0.000923737\n",
            "[547]\tvalid_0's l2: 0.000921799\n",
            "[548]\tvalid_0's l2: 0.000919909\n",
            "[549]\tvalid_0's l2: 0.000918022\n",
            "[550]\tvalid_0's l2: 0.000916181\n",
            "[551]\tvalid_0's l2: 0.000913609\n",
            "[552]\tvalid_0's l2: 0.000911072\n",
            "[553]\tvalid_0's l2: 0.000908569\n",
            "[554]\tvalid_0's l2: 0.0009061\n",
            "[555]\tvalid_0's l2: 0.000903665\n",
            "[556]\tvalid_0's l2: 0.000901787\n",
            "[557]\tvalid_0's l2: 0.000899934\n",
            "[558]\tvalid_0's l2: 0.000898104\n",
            "[559]\tvalid_0's l2: 0.000896297\n",
            "[560]\tvalid_0's l2: 0.000894513\n",
            "[561]\tvalid_0's l2: 0.000892984\n",
            "[562]\tvalid_0's l2: 0.000891473\n",
            "[563]\tvalid_0's l2: 0.000889981\n",
            "[564]\tvalid_0's l2: 0.00088851\n",
            "[565]\tvalid_0's l2: 0.000887054\n",
            "[566]\tvalid_0's l2: 0.000885617\n",
            "[567]\tvalid_0's l2: 0.000884197\n",
            "[568]\tvalid_0's l2: 0.000882794\n",
            "[569]\tvalid_0's l2: 0.000881407\n",
            "[570]\tvalid_0's l2: 0.000880082\n",
            "[571]\tvalid_0's l2: 0.000878297\n",
            "[572]\tvalid_0's l2: 0.000876535\n",
            "[573]\tvalid_0's l2: 0.000874798\n",
            "[574]\tvalid_0's l2: 0.000873084\n",
            "[575]\tvalid_0's l2: 0.000871393\n",
            "[576]\tvalid_0's l2: 0.000870137\n",
            "[577]\tvalid_0's l2: 0.000868896\n",
            "[578]\tvalid_0's l2: 0.000867671\n",
            "[579]\tvalid_0's l2: 0.000866461\n",
            "[580]\tvalid_0's l2: 0.000865267\n",
            "[581]\tvalid_0's l2: 0.00086391\n",
            "[582]\tvalid_0's l2: 0.00086257\n",
            "[583]\tvalid_0's l2: 0.000861249\n",
            "[584]\tvalid_0's l2: 0.000859945\n",
            "[585]\tvalid_0's l2: 0.000858658\n",
            "[586]\tvalid_0's l2: 0.000857499\n",
            "[587]\tvalid_0's l2: 0.000856355\n",
            "[588]\tvalid_0's l2: 0.00085528\n",
            "[589]\tvalid_0's l2: 0.000854219\n",
            "[590]\tvalid_0's l2: 0.000853172\n",
            "[591]\tvalid_0's l2: 0.000851428\n",
            "[592]\tvalid_0's l2: 0.00084971\n",
            "[593]\tvalid_0's l2: 0.000848017\n",
            "[594]\tvalid_0's l2: 0.000846349\n",
            "[595]\tvalid_0's l2: 0.000844706\n",
            "[596]\tvalid_0's l2: 0.000843368\n",
            "[597]\tvalid_0's l2: 0.000842047\n",
            "[598]\tvalid_0's l2: 0.000840745\n",
            "[599]\tvalid_0's l2: 0.000839455\n",
            "[600]\tvalid_0's l2: 0.000838182\n",
            "[601]\tvalid_0's l2: 0.000837078\n",
            "[602]\tvalid_0's l2: 0.000835987\n",
            "[603]\tvalid_0's l2: 0.00083491\n",
            "[604]\tvalid_0's l2: 0.000833845\n",
            "[605]\tvalid_0's l2: 0.000832793\n",
            "[606]\tvalid_0's l2: 0.000831502\n",
            "[607]\tvalid_0's l2: 0.00083023\n",
            "[608]\tvalid_0's l2: 0.000828977\n",
            "[609]\tvalid_0's l2: 0.000827735\n",
            "[610]\tvalid_0's l2: 0.000826512\n",
            "[611]\tvalid_0's l2: 0.00082533\n",
            "[612]\tvalid_0's l2: 0.000824163\n",
            "[613]\tvalid_0's l2: 0.000823009\n",
            "[614]\tvalid_0's l2: 0.000821875\n",
            "[615]\tvalid_0's l2: 0.000820752\n",
            "[616]\tvalid_0's l2: 0.000819514\n",
            "[617]\tvalid_0's l2: 0.000818293\n",
            "[618]\tvalid_0's l2: 0.00081709\n",
            "[619]\tvalid_0's l2: 0.000815904\n",
            "[620]\tvalid_0's l2: 0.000814734\n",
            "[621]\tvalid_0's l2: 0.000813778\n",
            "[622]\tvalid_0's l2: 0.000812836\n",
            "[623]\tvalid_0's l2: 0.000811907\n",
            "[624]\tvalid_0's l2: 0.000810992\n",
            "[625]\tvalid_0's l2: 0.00081009\n",
            "[626]\tvalid_0's l2: 0.000809221\n",
            "[627]\tvalid_0's l2: 0.000808363\n",
            "[628]\tvalid_0's l2: 0.000807516\n",
            "[629]\tvalid_0's l2: 0.00080677\n",
            "[630]\tvalid_0's l2: 0.000806269\n",
            "[631]\tvalid_0's l2: 0.000805355\n",
            "[632]\tvalid_0's l2: 0.000804455\n",
            "[633]\tvalid_0's l2: 0.000803889\n",
            "[634]\tvalid_0's l2: 0.000803012\n",
            "[635]\tvalid_0's l2: 0.000802163\n",
            "[636]\tvalid_0's l2: 0.000801335\n",
            "[637]\tvalid_0's l2: 0.000800521\n",
            "[638]\tvalid_0's l2: 0.000799722\n",
            "[639]\tvalid_0's l2: 0.000798937\n",
            "[640]\tvalid_0's l2: 0.000798165\n",
            "[641]\tvalid_0's l2: 0.000797312\n",
            "[642]\tvalid_0's l2: 0.000796475\n",
            "[643]\tvalid_0's l2: 0.000795635\n",
            "[644]\tvalid_0's l2: 0.000794809\n",
            "[645]\tvalid_0's l2: 0.000793999\n",
            "[646]\tvalid_0's l2: 0.000793441\n",
            "[647]\tvalid_0's l2: 0.000792892\n",
            "[648]\tvalid_0's l2: 0.00079235\n",
            "[649]\tvalid_0's l2: 0.000791817\n",
            "[650]\tvalid_0's l2: 0.000791291\n",
            "[651]\tvalid_0's l2: 0.000790472\n",
            "[652]\tvalid_0's l2: 0.000789667\n",
            "[653]\tvalid_0's l2: 0.000788876\n",
            "[654]\tvalid_0's l2: 0.0007881\n",
            "[655]\tvalid_0's l2: 0.000787338\n",
            "[656]\tvalid_0's l2: 0.000786806\n",
            "[657]\tvalid_0's l2: 0.000786283\n",
            "[658]\tvalid_0's l2: 0.000785768\n",
            "[659]\tvalid_0's l2: 0.000785263\n",
            "[660]\tvalid_0's l2: 0.000784792\n",
            "[661]\tvalid_0's l2: 0.000784377\n",
            "[662]\tvalid_0's l2: 0.000783969\n",
            "[663]\tvalid_0's l2: 0.000783568\n",
            "[664]\tvalid_0's l2: 0.000783175\n",
            "[665]\tvalid_0's l2: 0.000782788\n",
            "[666]\tvalid_0's l2: 0.000782259\n",
            "[667]\tvalid_0's l2: 0.000781737\n",
            "[668]\tvalid_0's l2: 0.000781224\n",
            "[669]\tvalid_0's l2: 0.000780719\n",
            "[670]\tvalid_0's l2: 0.000779524\n",
            "[671]\tvalid_0's l2: 0.000778879\n",
            "[672]\tvalid_0's l2: 0.000778247\n",
            "[673]\tvalid_0's l2: 0.000777628\n",
            "[674]\tvalid_0's l2: 0.000777034\n",
            "[675]\tvalid_0's l2: 0.000776453\n",
            "[676]\tvalid_0's l2: 0.000775725\n",
            "[677]\tvalid_0's l2: 0.000775011\n",
            "[678]\tvalid_0's l2: 0.000774312\n",
            "[679]\tvalid_0's l2: 0.000773627\n",
            "[680]\tvalid_0's l2: 0.000772681\n",
            "[681]\tvalid_0's l2: 0.000772226\n",
            "[682]\tvalid_0's l2: 0.000771782\n",
            "[683]\tvalid_0's l2: 0.000771347\n",
            "[684]\tvalid_0's l2: 0.000770923\n",
            "[685]\tvalid_0's l2: 0.000770508\n",
            "[686]\tvalid_0's l2: 0.000769986\n",
            "[687]\tvalid_0's l2: 0.000769546\n",
            "[688]\tvalid_0's l2: 0.000769077\n",
            "[689]\tvalid_0's l2: 0.000768656\n",
            "[690]\tvalid_0's l2: 0.000768205\n",
            "[691]\tvalid_0's l2: 0.000767654\n",
            "[692]\tvalid_0's l2: 0.000767113\n",
            "[693]\tvalid_0's l2: 0.000766585\n",
            "[694]\tvalid_0's l2: 0.000766066\n",
            "[695]\tvalid_0's l2: 0.000765561\n",
            "[696]\tvalid_0's l2: 0.000765096\n",
            "[697]\tvalid_0's l2: 0.000764641\n",
            "[698]\tvalid_0's l2: 0.000764196\n",
            "[699]\tvalid_0's l2: 0.00076376\n",
            "[700]\tvalid_0's l2: 0.000763334\n",
            "[701]\tvalid_0's l2: 0.000763753\n",
            "[702]\tvalid_0's l2: 0.000764181\n",
            "[703]\tvalid_0's l2: 0.000764617\n",
            "[704]\tvalid_0's l2: 0.000765061\n",
            "[705]\tvalid_0's l2: 0.000765512\n",
            "[706]\tvalid_0's l2: 0.000765163\n",
            "[707]\tvalid_0's l2: 0.000764818\n",
            "[708]\tvalid_0's l2: 0.000764479\n",
            "[709]\tvalid_0's l2: 0.000764146\n",
            "[710]\tvalid_0's l2: 0.000763818\n",
            "[711]\tvalid_0's l2: 0.000763483\n",
            "[712]\tvalid_0's l2: 0.000763157\n",
            "[713]\tvalid_0's l2: 0.000762839\n",
            "[714]\tvalid_0's l2: 0.000762531\n",
            "[715]\tvalid_0's l2: 0.000762231\n",
            "[716]\tvalid_0's l2: 0.000761959\n",
            "[717]\tvalid_0's l2: 0.000761693\n",
            "[718]\tvalid_0's l2: 0.000761433\n",
            "[719]\tvalid_0's l2: 0.000761179\n",
            "[720]\tvalid_0's l2: 0.000760932\n",
            "[721]\tvalid_0's l2: 0.000760201\n",
            "[722]\tvalid_0's l2: 0.000759484\n",
            "[723]\tvalid_0's l2: 0.000758779\n",
            "[724]\tvalid_0's l2: 0.000758087\n",
            "[725]\tvalid_0's l2: 0.000757407\n",
            "[726]\tvalid_0's l2: 0.000756905\n",
            "[727]\tvalid_0's l2: 0.000756625\n",
            "[728]\tvalid_0's l2: 0.000755868\n",
            "[729]\tvalid_0's l2: 0.000755606\n",
            "[730]\tvalid_0's l2: 0.000754869\n",
            "[731]\tvalid_0's l2: 0.000754594\n",
            "[732]\tvalid_0's l2: 0.000754329\n",
            "[733]\tvalid_0's l2: 0.000754072\n",
            "[734]\tvalid_0's l2: 0.000753825\n",
            "[735]\tvalid_0's l2: 0.000753587\n",
            "[736]\tvalid_0's l2: 0.000753545\n",
            "[737]\tvalid_0's l2: 0.000753508\n",
            "[738]\tvalid_0's l2: 0.000753476\n",
            "[739]\tvalid_0's l2: 0.00075345\n",
            "[740]\tvalid_0's l2: 0.000753428\n",
            "[741]\tvalid_0's l2: 0.000753273\n",
            "[742]\tvalid_0's l2: 0.000753124\n",
            "[743]\tvalid_0's l2: 0.000752981\n",
            "[744]\tvalid_0's l2: 0.000752844\n",
            "[745]\tvalid_0's l2: 0.000752712\n",
            "[746]\tvalid_0's l2: 0.000752192\n",
            "[747]\tvalid_0's l2: 0.000751686\n",
            "[748]\tvalid_0's l2: 0.000751193\n",
            "[749]\tvalid_0's l2: 0.000750714\n",
            "[750]\tvalid_0's l2: 0.000750247\n",
            "[751]\tvalid_0's l2: 0.000750001\n",
            "[752]\tvalid_0's l2: 0.000749763\n",
            "[753]\tvalid_0's l2: 0.000749531\n",
            "[754]\tvalid_0's l2: 0.000749306\n",
            "[755]\tvalid_0's l2: 0.000749071\n",
            "[756]\tvalid_0's l2: 0.000748955\n",
            "[757]\tvalid_0's l2: 0.000748854\n",
            "[758]\tvalid_0's l2: 0.00074875\n",
            "[759]\tvalid_0's l2: 0.000748675\n",
            "[760]\tvalid_0's l2: 0.000748605\n",
            "[761]\tvalid_0's l2: 0.000749331\n",
            "[762]\tvalid_0's l2: 0.000750061\n",
            "[763]\tvalid_0's l2: 0.000750794\n",
            "[764]\tvalid_0's l2: 0.000751531\n",
            "[765]\tvalid_0's l2: 0.00075228\n",
            "[766]\tvalid_0's l2: 0.000752097\n",
            "[767]\tvalid_0's l2: 0.000751921\n",
            "[768]\tvalid_0's l2: 0.00075175\n",
            "[769]\tvalid_0's l2: 0.000751585\n",
            "[770]\tvalid_0's l2: 0.000751425\n",
            "[771]\tvalid_0's l2: 0.000751328\n",
            "[772]\tvalid_0's l2: 0.000751235\n",
            "[773]\tvalid_0's l2: 0.000751148\n",
            "[774]\tvalid_0's l2: 0.000751066\n",
            "[775]\tvalid_0's l2: 0.000750988\n",
            "[776]\tvalid_0's l2: 0.000750873\n",
            "[777]\tvalid_0's l2: 0.000750763\n",
            "[778]\tvalid_0's l2: 0.00075066\n",
            "[779]\tvalid_0's l2: 0.000750563\n",
            "[780]\tvalid_0's l2: 0.000750472\n",
            "[781]\tvalid_0's l2: 0.000750096\n",
            "[782]\tvalid_0's l2: 0.000750018\n",
            "[783]\tvalid_0's l2: 0.000749654\n",
            "[784]\tvalid_0's l2: 0.000749583\n",
            "[785]\tvalid_0's l2: 0.000749088\n",
            "[786]\tvalid_0's l2: 0.000749096\n",
            "[787]\tvalid_0's l2: 0.000749106\n",
            "[788]\tvalid_0's l2: 0.00074912\n",
            "[789]\tvalid_0's l2: 0.000749137\n",
            "[790]\tvalid_0's l2: 0.000749157\n",
            "[791]\tvalid_0's l2: 0.000749164\n",
            "[792]\tvalid_0's l2: 0.000749177\n",
            "[793]\tvalid_0's l2: 0.000749195\n",
            "[794]\tvalid_0's l2: 0.00074922\n",
            "[795]\tvalid_0's l2: 0.00074925\n",
            "[796]\tvalid_0's l2: 0.000749182\n",
            "[797]\tvalid_0's l2: 0.000749127\n",
            "[798]\tvalid_0's l2: 0.000749063\n",
            "[799]\tvalid_0's l2: 0.000749017\n",
            "[800]\tvalid_0's l2: 0.000748962\n",
            "[801]\tvalid_0's l2: 0.000748959\n",
            "[802]\tvalid_0's l2: 0.00074896\n",
            "[803]\tvalid_0's l2: 0.000748965\n",
            "[804]\tvalid_0's l2: 0.000748974\n",
            "[805]\tvalid_0's l2: 0.000748987\n",
            "[806]\tvalid_0's l2: 0.000748703\n",
            "[807]\tvalid_0's l2: 0.000748425\n",
            "[808]\tvalid_0's l2: 0.000748152\n",
            "[809]\tvalid_0's l2: 0.000747884\n",
            "[810]\tvalid_0's l2: 0.000747621\n",
            "[811]\tvalid_0's l2: 0.000747649\n",
            "[812]\tvalid_0's l2: 0.000747559\n",
            "[813]\tvalid_0's l2: 0.000747529\n",
            "[814]\tvalid_0's l2: 0.000747349\n",
            "[815]\tvalid_0's l2: 0.000747327\n",
            "[816]\tvalid_0's l2: 0.000747194\n",
            "[817]\tvalid_0's l2: 0.000747064\n",
            "[818]\tvalid_0's l2: 0.000746938\n",
            "[819]\tvalid_0's l2: 0.000746803\n",
            "[820]\tvalid_0's l2: 0.000746673\n",
            "[821]\tvalid_0's l2: 0.000746728\n",
            "[822]\tvalid_0's l2: 0.000746788\n",
            "[823]\tvalid_0's l2: 0.000746449\n",
            "[824]\tvalid_0's l2: 0.000746518\n",
            "[825]\tvalid_0's l2: 0.0007469\n",
            "[826]\tvalid_0's l2: 0.000746743\n",
            "[827]\tvalid_0's l2: 0.000746591\n",
            "[828]\tvalid_0's l2: 0.000746444\n",
            "[829]\tvalid_0's l2: 0.000746301\n",
            "[830]\tvalid_0's l2: 0.000746164\n",
            "[831]\tvalid_0's l2: 0.00074513\n",
            "[832]\tvalid_0's l2: 0.000744108\n",
            "[833]\tvalid_0's l2: 0.000743097\n",
            "[834]\tvalid_0's l2: 0.000742097\n",
            "[835]\tvalid_0's l2: 0.000741109\n",
            "[836]\tvalid_0's l2: 0.000740172\n",
            "[837]\tvalid_0's l2: 0.000739245\n",
            "[838]\tvalid_0's l2: 0.000738303\n",
            "[839]\tvalid_0's l2: 0.000737395\n",
            "[840]\tvalid_0's l2: 0.000736473\n",
            "[841]\tvalid_0's l2: 0.000736741\n",
            "[842]\tvalid_0's l2: 0.000737012\n",
            "[843]\tvalid_0's l2: 0.000737285\n",
            "[844]\tvalid_0's l2: 0.000737561\n",
            "[845]\tvalid_0's l2: 0.000737983\n",
            "[846]\tvalid_0's l2: 0.000738143\n",
            "[847]\tvalid_0's l2: 0.000738305\n",
            "[848]\tvalid_0's l2: 0.00073847\n",
            "[849]\tvalid_0's l2: 0.000738639\n",
            "[850]\tvalid_0's l2: 0.000738514\n",
            "[851]\tvalid_0's l2: 0.000738552\n",
            "[852]\tvalid_0's l2: 0.000738593\n",
            "[853]\tvalid_0's l2: 0.00073853\n",
            "[854]\tvalid_0's l2: 0.000738577\n",
            "[855]\tvalid_0's l2: 0.000738521\n",
            "[856]\tvalid_0's l2: 0.000738455\n",
            "[857]\tvalid_0's l2: 0.000738395\n",
            "[858]\tvalid_0's l2: 0.00073834\n",
            "[859]\tvalid_0's l2: 0.000738291\n",
            "[860]\tvalid_0's l2: 0.000738247\n",
            "[861]\tvalid_0's l2: 0.000738654\n",
            "[862]\tvalid_0's l2: 0.000739065\n",
            "[863]\tvalid_0's l2: 0.000739479\n",
            "[864]\tvalid_0's l2: 0.000739897\n",
            "[865]\tvalid_0's l2: 0.000740318\n",
            "[866]\tvalid_0's l2: 0.000738729\n",
            "[867]\tvalid_0's l2: 0.000737155\n",
            "[868]\tvalid_0's l2: 0.000735597\n",
            "[869]\tvalid_0's l2: 0.000734055\n",
            "[870]\tvalid_0's l2: 0.000732528\n",
            "[871]\tvalid_0's l2: 0.000732431\n",
            "[872]\tvalid_0's l2: 0.00073234\n",
            "[873]\tvalid_0's l2: 0.000732256\n",
            "[874]\tvalid_0's l2: 0.000732178\n",
            "[875]\tvalid_0's l2: 0.000732107\n",
            "[876]\tvalid_0's l2: 0.000732079\n",
            "[877]\tvalid_0's l2: 0.000732053\n",
            "[878]\tvalid_0's l2: 0.000732004\n",
            "[879]\tvalid_0's l2: 0.000731984\n",
            "[880]\tvalid_0's l2: 0.000731941\n",
            "[881]\tvalid_0's l2: 0.000731904\n",
            "[882]\tvalid_0's l2: 0.000731883\n",
            "[883]\tvalid_0's l2: 0.000731856\n",
            "[884]\tvalid_0's l2: 0.000731844\n",
            "[885]\tvalid_0's l2: 0.000731827\n",
            "[886]\tvalid_0's l2: 0.000731343\n",
            "[887]\tvalid_0's l2: 0.000730865\n",
            "[888]\tvalid_0's l2: 0.000730562\n",
            "[889]\tvalid_0's l2: 0.000730094\n",
            "[890]\tvalid_0's l2: 0.000729801\n",
            "[891]\tvalid_0's l2: 0.000729812\n",
            "[892]\tvalid_0's l2: 0.000729827\n",
            "[893]\tvalid_0's l2: 0.000729845\n",
            "[894]\tvalid_0's l2: 0.000729867\n",
            "[895]\tvalid_0's l2: 0.000729892\n",
            "[896]\tvalid_0's l2: 0.00072935\n",
            "[897]\tvalid_0's l2: 0.000728816\n",
            "[898]\tvalid_0's l2: 0.000728288\n",
            "[899]\tvalid_0's l2: 0.000727768\n",
            "[900]\tvalid_0's l2: 0.000727254\n",
            "[901]\tvalid_0's l2: 0.000726942\n",
            "[902]\tvalid_0's l2: 0.000726637\n",
            "[903]\tvalid_0's l2: 0.000726336\n",
            "[904]\tvalid_0's l2: 0.00072604\n",
            "[905]\tvalid_0's l2: 0.000725726\n",
            "[906]\tvalid_0's l2: 0.000725661\n",
            "[907]\tvalid_0's l2: 0.000725598\n",
            "[908]\tvalid_0's l2: 0.000725538\n",
            "[909]\tvalid_0's l2: 0.000725481\n",
            "[910]\tvalid_0's l2: 0.000725425\n",
            "[911]\tvalid_0's l2: 0.000724824\n",
            "[912]\tvalid_0's l2: 0.000724228\n",
            "[913]\tvalid_0's l2: 0.00072364\n",
            "[914]\tvalid_0's l2: 0.000723058\n",
            "[915]\tvalid_0's l2: 0.000722482\n",
            "[916]\tvalid_0's l2: 0.000722443\n",
            "[917]\tvalid_0's l2: 0.000722408\n",
            "[918]\tvalid_0's l2: 0.000722377\n",
            "[919]\tvalid_0's l2: 0.000722368\n",
            "[920]\tvalid_0's l2: 0.000722345\n",
            "[921]\tvalid_0's l2: 0.000721965\n",
            "[922]\tvalid_0's l2: 0.00072159\n",
            "[923]\tvalid_0's l2: 0.000721219\n",
            "[924]\tvalid_0's l2: 0.000720853\n",
            "[925]\tvalid_0's l2: 0.000720491\n",
            "[926]\tvalid_0's l2: 0.000720558\n",
            "[927]\tvalid_0's l2: 0.000720628\n",
            "[928]\tvalid_0's l2: 0.000720701\n",
            "[929]\tvalid_0's l2: 0.000720777\n",
            "[930]\tvalid_0's l2: 0.000720855\n",
            "[931]\tvalid_0's l2: 0.000720832\n",
            "[932]\tvalid_0's l2: 0.000720813\n",
            "[933]\tvalid_0's l2: 0.000720799\n",
            "[934]\tvalid_0's l2: 0.000720788\n",
            "[935]\tvalid_0's l2: 0.000720781\n",
            "[936]\tvalid_0's l2: 0.000720878\n",
            "[937]\tvalid_0's l2: 0.000720978\n",
            "[938]\tvalid_0's l2: 0.000721083\n",
            "[939]\tvalid_0's l2: 0.000721192\n",
            "[940]\tvalid_0's l2: 0.000721304\n",
            "[941]\tvalid_0's l2: 0.000721853\n",
            "[942]\tvalid_0's l2: 0.000722404\n",
            "[943]\tvalid_0's l2: 0.000722955\n",
            "[944]\tvalid_0's l2: 0.000723507\n",
            "[945]\tvalid_0's l2: 0.000724059\n",
            "[946]\tvalid_0's l2: 0.000723787\n",
            "[947]\tvalid_0's l2: 0.00072352\n",
            "[948]\tvalid_0's l2: 0.000723256\n",
            "[949]\tvalid_0's l2: 0.000722996\n",
            "[950]\tvalid_0's l2: 0.00072274\n",
            "[951]\tvalid_0's l2: 0.000722564\n",
            "[952]\tvalid_0's l2: 0.000722393\n",
            "[953]\tvalid_0's l2: 0.000722229\n",
            "[954]\tvalid_0's l2: 0.000722071\n",
            "[955]\tvalid_0's l2: 0.000721919\n",
            "[956]\tvalid_0's l2: 0.000721961\n",
            "[957]\tvalid_0's l2: 0.000722008\n",
            "[958]\tvalid_0's l2: 0.000722059\n",
            "[959]\tvalid_0's l2: 0.000722114\n",
            "[960]\tvalid_0's l2: 0.000722173\n",
            "[961]\tvalid_0's l2: 0.000722286\n",
            "[962]\tvalid_0's l2: 0.000722383\n",
            "[963]\tvalid_0's l2: 0.000722484\n",
            "[964]\tvalid_0's l2: 0.000722587\n",
            "[965]\tvalid_0's l2: 0.000722693\n",
            "[966]\tvalid_0's l2: 0.000722545\n",
            "[967]\tvalid_0's l2: 0.0007224\n",
            "[968]\tvalid_0's l2: 0.00072226\n",
            "[969]\tvalid_0's l2: 0.000722124\n",
            "[970]\tvalid_0's l2: 0.000721992\n",
            "[971]\tvalid_0's l2: 0.000722284\n",
            "[972]\tvalid_0's l2: 0.000722578\n",
            "[973]\tvalid_0's l2: 0.000722874\n",
            "[974]\tvalid_0's l2: 0.000723173\n",
            "[975]\tvalid_0's l2: 0.000723474\n",
            "[976]\tvalid_0's l2: 0.000722964\n",
            "[977]\tvalid_0's l2: 0.000722461\n",
            "[978]\tvalid_0's l2: 0.000721956\n",
            "[979]\tvalid_0's l2: 0.000721458\n",
            "[980]\tvalid_0's l2: 0.000720966\n",
            "[981]\tvalid_0's l2: 0.000720136\n",
            "[982]\tvalid_0's l2: 0.000719318\n",
            "[983]\tvalid_0's l2: 0.000718511\n",
            "[984]\tvalid_0's l2: 0.000717715\n",
            "[985]\tvalid_0's l2: 0.000716992\n",
            "[986]\tvalid_0's l2: 0.000717046\n",
            "[987]\tvalid_0's l2: 0.000717104\n",
            "[988]\tvalid_0's l2: 0.000717164\n",
            "[989]\tvalid_0's l2: 0.000717228\n",
            "[990]\tvalid_0's l2: 0.000717231\n",
            "[991]\tvalid_0's l2: 0.000717532\n",
            "[992]\tvalid_0's l2: 0.000717837\n",
            "[993]\tvalid_0's l2: 0.000718147\n",
            "[994]\tvalid_0's l2: 0.000718461\n",
            "[995]\tvalid_0's l2: 0.000718798\n",
            "[996]\tvalid_0's l2: 0.000717488\n",
            "[997]\tvalid_0's l2: 0.000716727\n",
            "[998]\tvalid_0's l2: 0.000715434\n",
            "[999]\tvalid_0's l2: 0.000714685\n",
            "[1000]\tvalid_0's l2: 0.000713946\n",
            "Did not meet early stopping. Best iteration is:\n",
            "[1000]\tvalid_0's l2: 0.000713946\n",
            "1.1104722299996865\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WSlSXGFzTRiW"
      },
      "source": [
        "origin_list = list(reg.booster_.feature_importance())\n",
        "importance_list = list(reg.booster_.feature_importance())\n",
        "idx_list = []\n",
        "for i in sorted(importance_list, reverse=True)[:16] :\n",
        "  idx = origin_list.index(i)\n",
        "  idx_list.append(idx)"
      ],
      "execution_count": 105,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0GGuMPvBY8fo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f5edb944-77ae-4b63-aac3-b4c063d2eeea"
      },
      "source": [
        "list(data.columns[idx_list])"
      ],
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['MEASURE_VALUE',\n",
              " '退錫槽溫度',\n",
              " '退膜-2溫度',\n",
              " '熱風吹乾溫度',\n",
              " '蝕刻-2槽溫度',\n",
              " '加壓水洗2下噴壓',\n",
              " '加壓水洗1下噴壓',\n",
              " '退錫A上噴壓',\n",
              " 'MEASURE_ITEM',\n",
              " '強風吹乾-2',\n",
              " '退膜2-上噴壓',\n",
              " '退膜1-下噴壓',\n",
              " '退膜1-下噴壓',\n",
              " '蝕刻速度-設',\n",
              " '射流泵-1',\n",
              " '除鈀槽溫度']"
            ]
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# LGB模型測試"
      ],
      "metadata": {
        "id": "QiluXGewQqNt"
      }
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ktqTGW40tP6z",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c7fc15aa-b590-4ff8-879c-d88c274427cc"
      },
      "source": [
        "# 應該把point1~3 均衡切進 train, val, test\n",
        "x = [i for i in range(len(x_test))]\n",
        "test_answer_1 = y_test.to_numpy()\n",
        "start = timer()\n",
        "_predict = reg.predict(x_test, num_iteration=reg.best_iteration_)\n",
        "end = timer()\n",
        "print(end-start)\n",
        "test_result_1 = list(_predict)\n",
        "err_1 = CalErrList(test_result_1, test_answer_1)\n"
      ],
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.01660635700045532\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "7Zjtq2H81bJD",
        "outputId": "5f10c216-3c77-438a-8bef-b0d6f0320bd2"
      },
      "source": [
        "DrawCurve(test_result_1, test_answer_1)"
      ],
      "execution_count": 108,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5.545471043426423, 5.466716853974575, 5.56620328371572, 5.194376661592072, 5.679015662830468, 5.92846637101863, 5.189195660416268, 5.721136854462047, 5.6533352980089875, 5.62072329893703, 5.5841092879324155, 5.6137698015985045, 5.469859698680278, 5.336868718350093, 5.1827770503888555, 5.544773728001237, 5.289591345227355, 5.357755099136977, 5.276168281074236, 5.600541533685007, 5.193030628577546, 5.936494921841962, 5.918746095729874, 5.6593232237747735, 5.34484394869583, 5.92718849424639, 5.952511918348537, 5.262858076740746, 5.556571992065736, 5.412973410652488, 5.543744648767894, 5.314538369797173, 5.5990015121844126, 5.451967053586669, 5.193681504768544, 5.647470466628939, 5.355383694083079, 5.4159788700058655, 5.412694691584073, 5.323372552883612, 5.18636647130501, 5.580139445969909, 5.186982870854035, 5.403824821796036, 5.268162522574453, 5.805872502908892, 5.562731925611288, 5.6533352980089875, 5.3727536388981445, 5.327776774609046, 5.445774435561679, 5.377530808577539, 5.723811961138393, 5.373318018219506, 5.523885977085772, 5.551206349292434, 5.933930257345146, 5.925799291261777, 5.4031490224695045, 5.639720514765213]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAD4CAYAAAD8Zh1EAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOy9eZhkZX33/Tm1ntq6qrq6p5fZB2bpgRlAR8yjyK6gURJyKRKNhhA1romPeV2iEZ8Y31zm0bzqkzzGLYomKgkYI6KoUQRBRASBBmYGmJ2e3qprr1N71Xn/uOvU0rV0rV3dM+d7XXNNd53qU3edc+7v/bt/y/cnqaqKDh06dOhY/zAMegA6dOjQoaM30Aldhw4dOs4Q6ISuQ4cOHWcIdELXoUOHjjMEOqHr0KFDxxkC06A+eGRkRN22bdugPl6HDh061iUeffTRJVVVR+sdGxihb9u2jUceeWRQH69Dhw4d6xKSJJ1sdEx3uejQoUPHGQKd0HXo0KHjDIFO6Dp06NBxhmBgPvR6yGazzMzMkEqlBj2UMx6yLLNp0ybMZvOgh6JDh44eYU0R+szMDC6Xi23btiFJ0qCHc8ZCVVUCgQAzMzNs37590MPRoUNHj7CmXC6pVAqfz6eTeZ8hSRI+n0/fCenQcYZhTRE6oJP5KkG/zjp0nHlYc4S+ZpBOQzg86FHo0KFDR8vQCb0RFhfh2LGuT/Nf//VfHDx4sO2/O3HiBN/61rdKv9966628+93v7no8OnToOHOhE3oj5HJQKECXDUCaEXoul2v4d8sJXYcOHTpWgk7oFbjlllv47Gc/K37J5/nI5z/P5z73uY7P9+CDD3LnnXfy/ve/nwsvvJCjR49y+eWX8973vpcDBw7wuc99jptuuok77rij9DdOpxOAD33oQ9x///1ceOGFfOYznwFgdnaWa6+9lp07d/KBD3yg8y+qQ4eOMxJrKm2xCu99Lzz+eG/PeeGFoBF2Hdx88838wR/8Ae9973spZDLc9pOf8PAnP1nzvpe97GXEYrGa1z/96U9z9dVXl35/yUtewnXXXcerX/1qXvva15Zez2QyJR2bm266qe5YPvnJT/LpT3+au+66CxAul8cff5zHHnsMq9XK7t27ec973sPmzZtb+uo6dOg487F2CX0A2LZtGz6fj8cee4yFhx/mot278Xm9Ne+7//77u/qc17/+9R393VVXXYXb7QZg7969nDx5Uid0DaoKd9wBv//7oBdL6ThLsXYJvYkl3U+85S1v4dZbb2X+8GFuvu66uj70Vi30RnA4HKWfTSYThUIBgEKhQCaTafh3Vqu19LPRaGzqgz/rcN99cMMNcPfdcO21gx6NDh0Dwdol9AHh+uuv55ZbbiGrKHzr4x+vS+jtWOgul6su+WvYtm0bjz76KDfccAN33nkn2Wy2pb/TsQyaey4eH+w4dOgYIPSg6DJYLBauuPxybrjqKoxGo8h06QI33ngjn/rUp7jooos4evRozfG3vvWt3HfffVxwwQX86le/Klnv+/fvx2g0csEFF5SCojqaYHpa/K9Xv+o4iyGpXabldYoDBw6oyxtcHDp0iKmpqYGMR0OhUOAFF13E7R/7GDu3bIG9e8FuH+iY+oW1cL17hgMH4NFH4ctfhre8ZdCj0aGjb5Ak6VFVVQ/UO6Zb6BU4ePAg5557Llddfrkgc+jaQtexCsjn4emnxc/p9GDHokPHANGSD12SJA/wFeB8QAVuVlX1VxXHJeBzwKuABHCTqqq/7f1w+4u9e/dy7Ngx4Yc9fFi8OKAdjI42cORI2dWiu1x0nMVoNSj6OeBHqqq+VpIkC7DcB/FKYGfx34uBfy7+vz6Rz5d/1gl97UPzn4NO6DrOaqzocpEkyQ1cCvwLgKqqGVVVl6tW/R7wDVXgIcAjSdJEz0e7WqhMB9RdLmsf09NgNIIk6YSu46xGKz707YAf+JokSY9JkvQVSZIcy96zEXi+4veZ4mvrE5UWuk7oax/T07B7N8iy7kPXcVajFUI3AS8A/llV1YsABfhQJx8mSdLbJEl6RJKkR/x+fyenWB1UWui6y2XtY3oa9u8XhK5b6DrOYrRC6DPAjKqqvy7+fgeC4CtxGqisQd9UfK0Kqqp+SVXVA6qqHhgdHe1kvKuDNexDv/zyy0s6MK961asIN9Fs71S6d10hEoETJ3RC16GDFghdVdV54HlJknYXX7oKWM4SdwJvlgR+B4ioqjrX26GuIvJ54Y+FVXG5dFrC/8Mf/hCPx9Pw+FlB6E89Jf7ftw+sVp3QdZzVaDUP/T3ANyVJmgYuBP5OkqS3S5L09uLxHwLHgCPAl4F39nykq4CSfG4uByaTkM/90pe6OudNN93E29/+dg4cOMCuXbuq1BOvu+46rrzySq666ioUReHmm2/m4osv5qKLLuJ73/seAMlkkhtvvJGpqSmuv/56kslk6dzbtm1jaWkJgG984xvs37+fCy64gDe96U11pXvPSGgZLpqFrvvQdZzFaCltUVXVx4HllUlfqDiuAu/q4bgGoZ5bls995SspGI1CPvfHP655X7viXCdOnODhhx/m6NGjXHHFFRw5cgSA3/72t0xPTzM8PMyHP/xhrrzySr761a8SDoe5+OKLufrqq/niF7+I3W7n0KFDTE9P84IXLPd2wdNPP80nPvEJHnzwQUZGRggGgwwPD9eV7j3j8OST4HbD5s26y0XHWQ9dnKsCJfncJ59kIRLpmXzuDTfcgMFgYOfOnezYsYPDxaKll7/85QwPDwPwk5/8hDvvvJNPf/rTAKRSKU6dOsUvfvEL/vzP/xwQ+i779++vOf8999zD6173OkZGRgBK5zwroAVEJUkndB1nPdYsoQ9IPVfI5373u8xHIj2Tz5U0f/yy3ytldFVV5Tvf+Q67d+9GR4tQVUHob36z+F33oes4y6FruSzD9ddfz49++Ut+Mz3NNS95Sd2g6P3338/jjz9e86+RFvrtt99OoVDg6NGjHDt2rC5pX3PNNfzjP/4jmljaY489BsCll15a6i361FNPMV1ZFVnElVdeye23304gEAAgGAwCZ4EE78mTEIsJCx10H7qOsx46oS+DxWzmihe+kBuuuw6jydSTtMUtW7Zw8cUX88pXvpIvfOELyLJc856PfvSjZLNZ9u/fz3nnncdHP/pRAN7xjncQj8eZmprilltu4YUvfGHN35533nl85CMf4bLLLuOCCy7gfe97H7CydO+6R2VAFHSXi46zHrp87jIU0mlesG8ft3/96+y020XAbdu2js930003rdnA5Fq43l3hE5+Aj34UYjHm404+8bIf87/UjzFy5KFBj0yHjr5Bl89tEQcPHuTcPXu46kUvYueuXSLQtsYKi3RUYHoazjmHcM7JNdfA/z1yDb+M7hv0qHToGBjWbFB0ENi7dy/HnnoKDh0SYk8GQ9eFRbfeemtvBqejFtPTJPYe4NWvLntfkhnjYMekQ8cAseYs9EG5gErQqjZNpjPaQl/N6xwOV6sp9ATJJJlnT/DaQx/nV7+CYrYnqcyae6R16Fg1rKmnX5ZlAoHAYEldYx5NjvUMJHRVVQkEAnWDs73/LNixAy69FGZmenfe/JMH+WP1a9x9ZBdf/CK88Y3i9WRW33Tq6C9OnYKPfQx++cu1J8a6pp7+TZs2MTMzw0CVGGMxCAbJP3uU3FIYqzFXrb54hkCWZTZt2tT3z0mnIRSCBx8Ulbr/9m9w7bXdnVNV4T0fsnMbf8jfv3+Jt7xlhEhEHEvmiplJy3L/dejoFb79bfj4x8W/LVvgxhvFvwsvXAOPnaqqA/n3whe+UF2T+Lu/U1VQP/C+rOo2xVT1pS8d9IjWNUIhVQVVfcc7VHXfPvHzhz+sqtls5+f8wQ/EeT5g+gdVzeVUVVXVVEq89v/yV6qaTvdo9Dp01OKDH1RVs1lV//VfVfVVr1JVk0k8e+edp6qLi/3/fOARtQGvrimXy5pAKASyzKlZE5GcEzWlF6p0Ay0tfP9+eOgh+NM/hb/7O7j6apif7+yczxdbqfzF+T8TrjHAYgFJUkli03PRdfQVkQh4vfBHfwQ/+IF4jj/8YdGn/NChwY5NJ/TlCIXA6y2RTSa1xpxk6wwat8rmPHY7fOUr8PWvw69/DR/qqE0KJBQR17DvO6f0miSBzZzTCV1H3xEOQ6Vqtc8Hr3mN+FlRBjMmDTqhL8cyQte5oTukEmJBlO/419Jrb34zvOhFcPx4Z+dUFuIAOF5QLaFgs+R1QtfRd4TDot6wEposUzy++uOphE7oyxEKgcdTJvT0oKMc6xvJSAYA+b/vEp2Fihgbg4WFzs6ZOOnHRBbzRedXvS6bC6TQ9Vx09BeRSLWFDuB0iv91C32tIRwmNbQBrbNbMqUTejdIRYuEno/D3/xN6fXx8S4IPZDATqJGksFmLegWuo6+Y7nLBcqErlvoaw2hEAvy1tKvuoXeHUqE7rXDN75RihqNjYmJ0YkxrSgSDpTyLCrCJuuErqP/qEfomstFt9DXGkIh5sxbSr/qlYfdIRXLAmB702vBbodbbgEEoUNnVnoigbDQ7faq12WrKlwuOqHr6CPq+dBtNhGY1y30tYRCASIR5qWJ0ks6oXcHjdDljT543/vgjjvgt7/tjtBTkiD0ZZWuNhlhoes+dB19QiYDyWSthS5JwkrXLfS1hEgEVJX5wobSSynVckZWiq4WUnFx7WSnSRD68DD89V93RehKyojDkKwpy7PZ0F0uOvoKrSJ5OaGD8ADqFvpaQigEwHzWV3pJz5roDiVCH7KIfeoHPwh33834878BOrTQ00bsxkzN6za7pBO6jr5CS5ZY7nIB3UJfe9AIPVVefnVC7w6phBA7k11m8cK73w3j44x99q+ATgndhN1US+iyTdJ96Dr6ioYW+hNP4IzNEo/2Wla0PeiEXgmN0BUnVqt4SffJdoeUUiwschcvqN0Of/3XyL/8GUP2bEfl/0rWjMNcx0J3SPr90tFXaBZ6idBzOaFl8aIX4Vg8jjI32B6+OqFXQiP0iJ2txcxF3ULvDqVK0SFL+cW3vhUmJhgz+Duz0HMW7JbauIbNYdRdLjr6iipCf+YZuOQS+MhH4MILcRLXfehrChqhhyylmhWd0LuDRuiWoYqMFIsF9u1jjIXOCd1au7WVHUbd5aKjryj50O/4F6GX+9xzcNtt8NWv4kBBSQy2bkUn9EqEw6jAvN/I9u3iJZ3Qu0MqqSKTRLIta6axZQtj2ZnOCD1vxWGtY6E7hYWuJnVC19EflHzof/NeuOoqeOopeP3rweUSFnpysJSqE3olQiEiphHSaUm30HuEVEpFJiVyCiuxZQvj6ZMsLLTXESqfh5QqY7fV/p3NYaCAkWxSTzPV0R+Ew2CQCjgNSbjzTpgo1qw4ncJCTw22p61O6JUIhZgbEgp+W4rFojqhd4dkShKEvrzd3ZYtjLFAKCS1dXmTSfF/XUK3i+1uMj7YTAMdZy7CYXBbkki+YdFEXoPTKSz0tHlwg0Mn9GqEQsw7hMb2xATIlrxO6F0itQKhAywutn6+REL877DXErr2ESlFJ3Qd/UEkAh5THEZGqg9YrTgMKZJZc+8borcBndArEQoxbxXpLePjFdogOqF3jFRawkaq2pqBKkJvx4+uFW7YHbXBJ82rk1T0piQ6+oNwGDxSRHS1WAanVchcaEbHIKATeiVCIeZNonGyRuh6XnN3SGUkZENtzjibNnVE6ImYMH/sztpHt0Toifb88jp0tIpwGDxqqNZCBxyyeDYHWS2qE3olQiHmpQksFpFnqlvo3SOVMSLXKdPHamV8REyAtgg9KDJYHK4mhJ5se5g6dLSEcBjcuWBdQnfaxPM8yFx0ndArEQoxXxhlfFzoPsmyHhTtFqmsAdmYrXtsbJtg4LZcLkFxL+yu2myCkg89qVvoOvqDSETFk1ms63LR4jq6hb4WUChAOMx81lfKRLLZdELvFqmsCdlYP43QtnUDLkO8rfL/RKhI6EOm2vPpFrqOPkO4XBpY6Guga5FO6BricSgUmE+6GR8XL5XEnnRC7xipnBHZVN9CZ8sWxtT5tnLRE2HhvnF4atPDSoSe1h9rHb1HPg/RqISb+kFRh1ME6te8hS5J0glJkp6UJOlxSZIeqXPcLUnS9yVJekKSpKclSfqT3g+1zygJc7l0Qu8hUnkzsqlBHpdG6DMNCL8OlLB4r91jqTlWcrnohaI6+oBYUXfLQ7i+he4WbsD1YqFfoarqhaqqHqhz7F3AQVVVLwAuB/5BkqTaGbeWEQqRw4g/JlcQukHXBukSqZwZ2dyE0FlgYbb1xN1SlksdQtct9MFDVeHb3xadfc40lIS5CNe30IcEoa95C70FqIBLkiQJcAJBYH3VX4dCLLIBVZXKhG7X5Vi7RapgRrY0yAvfsoVx5llYar1cOhEVj5XDJ9ccKxF6ZrDl12czpqfhDW+Au+4a9Eh6j5IwF5H6FrpHxHXWg4WuAj+RJOlRSZLeVuf4PwFTwCzwJPAXqqqur+qOUIh5BJOXCF2WSEk6oXeDVMHSlNDHWCAYs7Rs0SlxcS7bsK3mWInQszqhDwrhBTFXZg5FBzyS3qPKQq+Xh+4Vu0YlNrhS0VYJ/RJVVV8AvBJ4lyRJly47fg3wODAJXAj8kyRJQ8tPIknS2yRJekSSpEf8fn834+496hK6nuXSLZIFK7K1QdBzdJQxUxBovfw/EVexkMY0ZK85VvKh6xb6wKA8fRyAuYdODXgkvUdJaVGK1m0qaveKJi7xYOsxoV6jJUJXVfV08f9F4LvAxcve8ifAf6oCR4DjwJ465/mSqqoHVFU9MDo62t3Ie406hK6nLXaHXA5ymJGtDSx0SWJsVBxrNRc9oag4UEQDx2XQCD2ZrU1p1LE60ILW83NnXi1AVXOL5VIWgNHtxEaidA0GgRUJXZIkhyRJLu1n4BXAU8vedgq4qvieMWA3cKy3Q+0zQiHmpUmAUkd63ULvDtplWy6FXomxjcKabpXQlYSEnURdQjcYwGrMkswNVvHubIYSETGOuaUzb1Et+dB9Db6bprgYHlz4sBULfQx4QJKkJ4CHgR+oqvojSZLeLknS24vv+VvgJZIkPQn8DPigqqpL/RlynxAKMW/dgttd9sXKMqRUq07oHUJLDloutFiJ8TarRRNJBKE3OKlsypHKm0W6hY5VRzws/Mdz4VqX2HqH5nIZ2tDggXa5hCb6ABtFr7iMqqp6DLigzutfqPh5FmG5r1+Ew8ybNpWqREFwRg4zuWR25QulowaiBF9CtjVuyzW2yw3AwmyOFh5HEikDDkNSaDPUgc2cJ5mWIZsVre50rCqUmHChzSVqQmjrHuEwuAxxTKPe+m/QLPSYc3UHVgE9YVdDKMQ8EyX/OZSNwHRyfSXsrBWkoiJ1pRmh28+ZwEmM+SOtJe8qKRN2Y+Mdk82S0xtFDxBKXOyMlrJusoNzJfcF4TC4idbNQQfKFroyuN2hTugaKoS5NJSCbLo2SEdIRQTxyvYmj9nmzaK46FRrbq1Exoi9nnpjETZLQSf0AUIjMxUDi222F1zrCIfVhjouQNlCjw+uUbRO6BpCIeYzw3UJXeeGzlCy0JsRulYtOtfaLiiRMeEwNyZ/2VLQA9kDRGXX+7kWd13rBZFgXmihN7LQtb6iSZ3QBw4lmCaWs1cRuhYc1Qm9M5QI3dEkL1yz0AOt5Y4rWQt2c+MsApusW+iDRDxRvo9zh8IDHEnvEQ7kGxYVAeByCQs9Obg6CJ3QAVSV+ZAoCtAt9N4hFRNOVNnZJNhptzMuh1mI1FZ+1kMiZ8FuaULoWpcp/aYNBErSgBdRLDZ/ZIA18H1AONS47B8Ah0NY6OnBpVDohA6gKMznxU2qS+jpwW2h1jNKhN7MQgfGvBkCaWdLQbRE3lpq9VUPpdoBndAHAiVtYgfFatGTZ5bbKxKTGgpzAWA04jSliacHVwehEzrUrRKFylJy/TJ1glRcWNKyq/kDPrZB/N9K+b+Sl7E3IXSbDV1QbYBQMiY8thQj+Jk7feYERVUVwnFTc5cL4LBkUbKWgZVB6EwFOqH3Ccm4IN4VCX2TOL4w33wWZLOQxYLd1vh9Nju6y2WAUDIWHDaVCWmBOf+Zo6mjKJAvGBo2t9DglHOoGAaWGaczFZQI3WBQqxbfUtpiM7GnQgG+9S3OuKTbHiClFAl9qHmBz9h2UVW4cKx5VoQ2SRxNihBtNkkn9AFCyVlwWLOMy2Hmw01KhNcZykqLEfA2KCwCHMVG0YPSRNcJHUSVKOOMDWcxVnB3yULPNrlMv/kNvPGNQtVfRxVSiaLU7VBzC318d7Fa9HCo6fu0SWJvQuiyXW9KMkjE8zaccp4JV5y5uGvQwxFWwLnnwo9/3NVpSkqLzhxVJLEMTpt45gelia4TOpQs9PGx6q18mdCbRK21pbvLB+ZMRMlCd1ubvm/sfKG8uXC0+SwodStyNA5S2xwG3Yc+QCh5GYecZ2I4zXxmePCSOrOz/PDoLmIPPd3VaUoWurv5F3IUq/51C32Q0Ah9ovpylPLQ8ybhWqmDpdkMV3APR+9+tuF7zlYILZeVCd2xexMO4syfat7lIhESJG13NbaQbE4jWSzkEzqhrzZUFRTVjsNeYGKsQEa1EAwOdkyLR2P8Lj/kGw/s6Oo8JaXF4eZxAWdRBFS30AeJUIg5JhjfVG2Jlyx05IZNEp961sK9XMGXQq+F3/623yNdV0glVYzkMLlWyDEfGxPFRSsERZWAcKM4XI0fW5tTTDgtZVLH6iGdhgJGHA4YL8oizx8dbLWo/2RC/B/sLkBbcrmMNM8xH3RfUZ3QgUIwzAJjjE9Ub+WrCL3BFl7Tf76NG1Hv/lFfx7nekEqBTKq5fi6AwcCYNcxCsPlkSQQFoduHGr9PLhK6lmGjY/WgycY6HBITO8QiPvf0YE300Jx4ZkLR7gi95HIZa77bdA4JStUt9AEiOJ8hh7kqZRHAWrx3zYJs8Yh4iE+xlV/dPtPPYa47pFJqa4QOjDkTLMSaa2gnIsLqtrsbB1ltxRRJndBXH/FFYQ07nBITO4Uzee65wVaLhhbEzjqodCelHA6J3aN7vPlu0+EWxoamOrna0AkdmC/myy4ndJMJTMbmYk+VN+7bT51fXsp1kEpLgtBNK5dCj/syLKTcTd+jhMTkdHiaELpmoSt6PGO1obnEnG4j4+eJXO2544PNNgr6xcIeSjS3rFdCeCmLTBLreOOURQCnVzybg+papBM6lPJllxM6gGzON82a0AT9L78ozH+oryP3k3v6Ns71hlRaQpaaBzo1jI1JBApessnGEyERFcfsnsbWlqa9rmXY6Fg9KEuiUMAxZMR17pgIdM8O9j6EAmJ+htLddVCKLKZXrBIFcHjFs6mEBhOU1wkdmC8KQ9Un9OYWelwRBPLW/+likTHu/frJvo1zvSGVMSAbWnuwxzabUTHgf6pxL7pErEjo3sbWlpaZpGvYrz5KOyi3CYaGmJDmmVsYbLVoKCzmZyjbXRehsD+3YpUogMMnjMN4cDBBeZ3QgXlFFEDUI3SbNd/c5ZKQMJDn+tcacZkSfPu+Cb2fZRGC0Ft7sMd2iAm38JS/4Xu0PHRt0tRDidAT+j1YbZQI3WsBSWLCGmQu1J2ro1sEi8HQUH6oq3kZDq4gnVuE2ePAQholohP6wDCfdGM3pXHVKWyTrWpzQk+KHpc2G/z+gdP8p3IN6ScO93nE6wPJjAnZ2CKh7/YAsPBM4xiEEhMT0uZrvH3WLfTBQQlXEDow7owzN8D+mgChuPBph/CixjoP0EYiNFda1KBpokcGE8PRCR2YT3sZd8Tq9h1eidDjKSNOo2CPP3y7mzBefvyPz/ZzuOsGqawR2dQaoY/vK1aLNtFzSSgqMkkMzsaEXko1TeoW+mojHhY7KKdPWOUT3hTz6eZBxH4jlBAPRBqZ5Hyk4/OEo8aWLPRS16LoYGIHOqGrKks5Nz5H/Wi8bF0hDz1twmESx65+wwZ8xhC3/fDM63jeCVI5E7KptWj/2DlFl8tM4yBqIqHiQAGHo+F7ShZ6Wn+0VxulPPQRcRMmNhSIFlwkEoMbU7AiGBo6Ge34PGHFLBpENxHmAir6iuppi4NBIkEcJy5b/RVVlldwuWTMOMzCCjWb4XV7D/K9+YtLEf+zGam8CVuLhO50gt2QZH6+sU6LkjBgJ1Fm7TooEXpKb0qy2tAyvkqEvlHcg0HmooeyTkyI+Rk63fnKEk5Z8ViTK6fgulzCQtcrRQeEeJwYLlyO+j4vWZaapi3Gs1ac1rJVeeObzCRw8P1PP9OX4a4npPJmZEvrW88xOcJCqHFKYiIpYZeS1PWNFbEuu0zNzsJC4+ye9QIlriJRQPaJHdT4VnEzBlYtWigQKrjZaheB9tBsZ0ZWKgXpvFkoLa4EzUJXBkOtOqHH48Rx4nTW3yLJNqm5hZ6z4qjocfmyd+5jI6e57fYzR9y/U6TyZmRz68GhMUechWRjydVE2oDD2LxQpWShr6emJG96E7ztbYMeRddQFHCgIBUF67Vq0fnnYgMZjxqNEWSYHT7hOw8tdpZ5oum4uF0tPMuahZ7SCX0wiMWEy6UBj6xI6Hm5JGoPYHDYeP3Wh7j7+O6zvmg0VbAgW9og9KEUC5nGPkolbcJubF6oVCb0wTXqbRtzc/D884MeRdeIJyQcJEp64RN7xb2cO97AMs5m+6pQqpwOk8PMOZvEMxPyd1a9WdJx8baw65NlnCjEk4Mx6HRCL7pcNFGd5bA5mhC6qqIUbCVRew03Xp8mo1r42j8MWDt0wEipVmRr6xN2xJMjoA43zDlMZEzYTc0J3WQCk5QjmV1HO6RYDAKBQY+iayhJA05D2U/tm9qAiSxzM/Xdbn8wej+fefkP+zae4EmxM9hxrpjbwaXOFo+S0qKvhWdKknCYMyiZwTSKPusJPR+OkcSO013/ZpU64NQj9GSSOE4c9mp3zYG3XsS13M2HP+ni4MF+jHrtQ1U1Qm/9b3w+COBDDdRfCBMZMw7zylICsjFLah0R+r8HruZ7C78z6GF0DSVlrHKJGbxuxlisG+heeOR5vhu5knufXiENsAtoQdBtOwxIFEpVo+2iZKGvIJ2rwWnJEM90JwbWKc56Qo8XBTRVR3UAACAASURBVIVcnvo3S7YbGxO6oqDgqMmik6b2cOu1/85QLsiNv588K7uh5XJCG1uWW0/f8o0ayGBFOV3fV6XkLNgtK2+bbaYsyexgLKS2oar8ffI9/EP6Xeu+y1JlCi9QrBYNMBesXdV//i/HAPAr3WmsNIMWBPVtlPEYooQindFdeEF8p5WUFjU4rDmUrKVhYWq+jynqOqEHhMXnHK6/osqOxoReiMZJ4MDhXLbySxJj//ppvuZ9H08+Z+ODfzkY5bVBotStSG7dKvKNCxIOHK+fL5zIWbFbV54NNnOOZH6dEHoySQwXfkbXvdtFpPBWz5MJe5S5aG3dwM9+Kp4Pf6p/NRvBBREEHd5kx2uKlapG20X4tMhB9Ey0RuhOW46camrUE4fhYfjIRzoayorQCT0gHkCXrwGh2yRS2FBTtYSeCAgLwDlUh7RGRnjVbX/MX/BZ/s/nTfzgB70b83pAKi4WMbm1OQAISwogMNPAh16w4pBXJnTZlCe1Xgg9HifKEEuMnAGEbsFhqc4kGfekmEt5qt+oqtxzfDsAi7n+VZJqQVDvFhdeS6JjCd3IvHgePZtba3rtsInFql4ueiwG0Si4mytFd4yzntBjIXHTnSP1BZ+0vOZ0opZIynKhDXxrr3gFf/+e01zA49z0hjRzc92Pd70gGRJ+JtnW+iPm2yy234HZ2sVTVUEp2LDLKwe2bJYcybxlfYikxWLEcBHAR35xfRN6PGfFaa3ejU6M5vDnh8lVvHzivpMcy29l3LBIFDfpSH98kqGguP/eTQ68tiShdBvWRQXCixmM5LBvbG3xcTrE59brWqRxwETiaEdjWQlnPaFrHYdcw/UtulKhSqKWSEo9Lt2NgyXW//23fGvX36BE8/zxH6bPmj7SqajYb8r2Ngh9m7CAluZq84WzWchjwm5bmaRtlqKGfXbt9xXNhURQXsVA6NRg8rV7BSUv45CXEfqkhIqBxeNlc/WerwmJ6RsuEMV3/mf6kw0WDEkYyeEakvA6sgQznQmFhZdyeAgjjawgzFWEFlOrZ6HPnRYEMPnsvR2NZSWc9YQeK6qiORvcay2vuR6hx4NF/7u3yfZeltn7n5/gM6YP8N/3WfnsZ9aB1dgDpCLCym6H0Ec2i4sdqJNepumBNJFxKcFmKTSt7l1L0Nq2AfhPrW+5CKVgw7FsBzW+Rbgy554q7z7uuc/ImGGRy14ujvmPdC6a1QyhmBGvMYokwbArKyR0O0AkXGhNmKsIp0u4YOta6M+K+JDWc7XXOOsJPV6UZG1E6M3U+5SwsAAdzQgd4LzzeNtnpngNd/LXf5Xj6Aq7rVikwLFDa5+MmiEVE9dGawnXCoZ9YiIEArUxCU0nxO5YOchaUshcB+lF0cXyGP2nW+vutBahqqCodhyO6nkyca5YgeeeEUSmFlTuef5crtx8hA1bBan5T/RH+CQUN+M1CVb1elRCqgc10/6uLRyWBKEPD7f0fodL0Go9C332WfHixK7W/PHtoiVClyTphCRJT0qS9LgkSY80eM/lxeNPS5J0X2+H2T9oq2jDStFmLpcSoa8cbJHe9U4+f/ntmLJJ/uzNiYbu3VRS5codx3npvui6cAE3Qsnl4mid0E0mcBuiBCK1LiwtAG13rvzI2uSihb4OCD22VF64lxbWbzZUKqmiYsCxLAtxYkoEROeL1aKHf3CUucI4V16WZ8M5YtItPt8f4yWYsDEsCwL1eiGLhcRc+7uBcNyI26S01BsXKNW0xKO1nDF3Io1MEs+5/cm/b8dCv0JV1QtVVT2w/IAkSR7g88B1qqqeB7yuVwPsN2JFEZ0VLfQ63KD5352jLWyfJIlN//ZJ/rf8MX72oJ1bv1p7s1UV3nX1MzwSPIf5/CiLz/VnK9oTxOPwmc80LN0uZbk42yvB91liBGK1GUeJYo9GzfppBpvM+iH0QNkq9/vXkaDYMmjux+UpvGPnC537uVPC+LnnX08DcNXNWxndJYKM/joxk14glLbjtYnnxusTz00ncYpwwiKUFltEua9o7Y5r9nSBCeaQNk62PY5W0CuXyxuA/1RV9RSAqqqLPTpv3xFPdE7oJf3nJi3RqrBxI2/754u4hPv5yz/PMD9fffhLHzvNVx/cw+XmXwJw6KenWzvvAJD//g+5733/BY89Vve45nJpm9DlBIFk7QKpBaDtrpUtfputueTxWoKWZQWwFFy/HlDFL2IBmv9Yg3XMwzAB5orP+j2/tLLN+DzbL92MZ6sbE1kW+yQ0Gco68TrFc+gdEyQbmmnfvRNJyXjsrbvDtJhafKmWNOYWTUwyW7/fZQ/Q6hOkAj+RJOlRSZLqycLtArySJN1bfM+b651EkqS3SZL0iCRJj/j9jXtHriZiSRM2Y1rTE6qBRuj19LWVooi9w9N6zrPhj9/Ely//FkpC4i9uLlsLv/p5ivf87QautdzDN74tznfwV2vXQr/7Fw4u5z4OPlHfukopYrGTh9orgfY5UwTStaurZqHb3Stfa9kmraqF/txzMDoKz3bQqCoaLu9w/JHBlIv3AqWMr6FlE0mSmDAvMbdkIZ8t8PO53Vy54zhIEpJBYtQQwB/sg0yDqhIsuBkeKuaiFwk9eLr9wHM4a8ftbD09zTEsXLBaS75KzIVkJswBsPan12qrhH6JqqovAF4JvEuSpEuXHTcBLwR+F7gG+KgkSbuWn0RV1S+pqnpAVdUDo6Oj3Yy7Z4inzThNjSd+M31tLejRSuZFCZLEnm9+lFvkT/Efd7u487/yzM/Da1+dZDOn+Oa3DWy67gW4CXPw6bXrRD89K67HYoMOQyVCd7VX4ONzZQlk3TU55Ili091WFk+bfXUJfXoalpbggQfa/9tY0c9qknIsKf3JfFgNNCR0RLXofNTOE985Qkj1ctVV5bk0aomwGOk9uRWiccJ48HqLuegbhXM/tNDeri2Xg3jBgWeodULXalrioVpjZzbuYsLVv4YfLRG6qqqni/8vAt8FLl72lhngx6qqKqqqLgG/AC7o5UD7hXjGgsvaeDtVSluso68d74TQASYnef8XzmEf07zzpgSvvdxPKGHlP//kLob/4HIks4kp2wkOnhpsg91mCAbERIksNbDQEx1a6N4CS/hqFBe1ALTds/L5bPZidW9ydQjd//BxoDMXWayocrDFFcKfWrv3eyUowWKMw1t7fybcCeYSbu75lvC7XPGnO0rHNtjifdFziZyKoGJguOg7H94sJmlosb3Ac7R4f1qSzi3C4rFjJIcSqS5GVBSI5hxMDvfvuVyR0CVJckiS5NJ+Bl4BPLXsbd8DLpEkySRJkh14MXCo14PtB2JZGae1cVCmZKHXIXQlYcAiZTB3UGVuefONfOWyf2M24uCXz4zyL+d+kgu++M7S8b1jAQ6GJ9o/8SohEBLXIxKoP0FSirBoZHd71tfICMQYIjNXXTWZiIrPsbeQUSTbhZWYjq9OYZH/uLC4Dk23n3YYiwui2OGL4M96+qoP3k+UMr7q7KDGR7LM5Ub46UNOpsxHmDiwsXRs1JXCn+59Cl/o+WK64qiI4Xi3ihz0UKC96xueF+Tr9rUeC5KGXKJr0TJCL1WJjvVPnasVC30MeECSpCeAh4EfqKr6I0mS3i5J0tsBVFU9BPwImC6+5yuqqi4n/bWHfJ54wYbL1njVbkroKQMOQ4fFIJLExf/+l/xfxwf5nPxB/vC/b6ZyZdh7boaF/CjBubUZ2AvGxFijofoPZ0mcq01C920QZBw8US3QlYgVA9DDK5/P5hD3KhldJUJfEGM7/Hy7WzWIKkbMUpZNI2mh57LKXVHe/z/u559u7MBXtAyae6GeyN3EhEQGK/f4z+fKndWNPDZ4Myxme6/nogU/Nd+5a4MNA/mSHECrCJ8UcSzPhjZ2mk6n6Fq0rFF0qUp0U/+knVdcdlRVPUYd94mqql9Y9vungE/1bmirgGJzC6+t8apdIvQ6+trxlOZ/71BpZ2yMd/zmZmGVbdtWdWjvRTL8VGzjX/qmHfX/foAIKIJYIw3itprHxOpuMQOoCN+EmDiBk3Eq8wBKhUW+lf3MtmImTDKWo3/ST2X4l8QCcjzqI5UqPzOtIJY04jImGB1V8TOKujSD1GIBSy/wnUe2sufIAu/u8jxKRBhF9TK+JjYLmsli4aprqylntLgjS0UzbbvnmiE4Kyzr4UkxHoNRwiNFCEXbI9PwTBwYa1lpEQBX0UJfpu4ommUPMbGtPwFRONMrRefnm+t5aP1EGzSIhuaELvSfu6zum5qC886rfflSETQ++MtQd+fvE4JJ4feMxOr7FlNJFTMZjM72An2+TcXy/2WKiwml2IB4eGV/q62YKqnlwvcbi2FBRAWMbWe6xFJmXKYUIxuMpLCROL269zucdxFOdU8w2oLrGKm93+PniJ2LRIHL3lKdK7FhXFBQr/VcQgtiXmrBUACvKUYw1l4abWS2KJ072YafX7PQl2VIzj4r3ED9qhKFM5jQC9E4b9z8C+77yzsbv6lI6K4msagSoedqHwQla8Zh6U+59pbLtmNH4eD02hSYCmTEQxmJ17d4UmmQSbVcXafBt1XcjOWKiwlFxU6i1IC4GbTc92S8j50EKuCPy2yjGBj9dX0t90aIpa24LGlGNxZ1TY73LwNiOdSCSlR1Ecl0n13TjNAndgv/9UXyIYanxqqOlb730fau20oILZWlczV4LQohpb3Fq+RD39yGDozTKSz0ZDW9zp1IYyHN8K7+dWk6Ywn96TsO8a3cDfz4oSbukKJ06fJiiEpYirvAZK422BNfIaDaDQwuB1OWoxw83r+OLh1DVQkWhY6iifoR4VRKwkYKpPaqH33bxXkDi8syBBISdhLltKMmsA2JMSWVBjuv+++HY8faGlcz+JMuLpEeRKLAoV+2Z2nGslaG5HRJmGw1BbqUYJo8JiK59n3/NeeKqxjIY/XVWkeT+0cwkOfqqdmaY6NbxPeuVGPsBYLFmPrw1jKhD8tJQqn2XIBhvzDYPFvbcKuazTikJMqyRtGzM3lRJTrZv2SHM5bQ7/+emFjhaJOvqFno7sbvkSSQTVlSeVNNbrSSt+JooYNOp9g7ssihwNrI16+EGlcIIKREI6n6fs9URkI2tB/QLTW5WFqWh56UsEtJMLRQ+r8CoX/md3/KT/7039seWz2oKixlh9g8mWM7xzn0ZJtpcVk7LluO0W2CVJdmV0+gK3Ja7AbChaGutePjioQDBalOE1nX1mF+9O4f8FdfqylNYcMOsQD0eiELhcFKqhQgB/A60oQy7S1ekUAeiQJD29qLazjNKeLp6t3p3KJRVIlO6IRexr33wmWXrZgN8MCjghjC8cZb/nRQIYsFp6d5oMRmzolS8mX+eCUv47D1j9CntqV4PjtRVU24FhB/PkQOQZqRBk0DUmkDsqF9crLbxUTU0iI1JNrIKNJcLvUE1SgU+HjsvfzTb1/S9tjqIRyGHGZGtzmYMj7HoZNtuC9UlVjBjsueZ2S7sCT986vjJoJyazUFJ7lwd64eJSnhlJSGO7KX/+N1eC7YWvN6Wc+lt/GOUNSE11jtxvE6c4Ry7fmvQ0s5XMQwWNvLTXaYsyiZZUHRkMyEeamlXWanWHeEHklauOMXoxTuubfhe9SCyv1z5wJCWKcRNK0F5wrVh7I5X6sNkskQx1lqN9UP7N0viOnwvfMrvHNlZLO9S3EOnChLFkSy9V1CqWxnhC5JMGKOsBStvidK2ojd2JrFb7MLUkkmau9N1h8mjJeDsU09uSD+WbHIj44ZmRpd4tnQaOtNgBMJYrhw2QuMjompuLTU9ZBahtZaDSD6fHcyE0qysxRe9zYvZjIs9lj9KRi3MGyuFuLyugtCQrfQ2pw99Pmf8/WnXsg+X62raCU4rVnimerdymzMxYSzv01M1h2hf3/hYl7HHTx623MN33PqgVPMFETxQjjd2GemKcQ16lakoS6hx+MoOErtpvqBvS8T27yD93ffmuw8z2n+vzc+2vV5AAKnijm+xgjRfP0tbCpjRDZ2Fl/wWeIE4tWTIZE2YW8xo0gzgJJ1+CV4VGSRHFO3k3xupul5vvlNeOMbm3+W1pxhdNLM1DkZ0gULJ060NMxSDGdoSGVoCMxk8If6l6O8HJHF8vMcmemOaJSUEUeLC24lJKOhqOfSWyoKJWW8yxQSvV6xm6psKtIIC3f9hle9ezuyKc+/3bel7c93yjmUfPkZTiYhnHX2tUoU1iGhv/I1JgzkuevnjX1hD3xbFC/stJ5s6jPTpEudI80j37KlUEvoioKCo0YutJfYfsV2rKQ4+Fh3xUW5dJ7nEhuZ/k1vipQ0gaMdQ0tEGKJee/NUzohs6mwb7bMnCCSr71si23qKaDNC9x8TxKVi4JmfNSf0276V57bb1Kp+mMuxeEy4KkY3y0xdKJ6jQw+3Ro5qVBC6yyWVdib+PuiaNELEX76emvulUyhpMw5TZ8/XBku453ouobSNYXs1eZYkdE82z6hJ/vYQv/f7EguMcef3Jbad137Q2GErkC5YSs9OqUp0Q39dauuO0H0+eMm2Ob6/9Ds06rp8/y9UhojwsnPnCDfxmcXD4mq7GjSI1lCP0LNhhQzWvhK6aXyEXcajHDraXcGFVu220KNJE5gXlvf2DQoxXBRCtdv1VNaEbOyQ0J0ZAsv6PypZC3ZLa+drJnm8dLJMXCupWU4/EKVQkJq6A7Rg3oYdTva8TKSjHXqgtR2VsqigYsDlEdNwVI6vqkBXOFAml0r3SydQMmYc5s4CuqN90HMJZofwOqvHo8kANJPQLZya4c2XHOXh/Av45uejXHxtZ0VeTrtw52m56HOzYic/ubG/lLvuCB3g1a+ReIwXcPqOX9U9/sCxCV4y/Aw+r0oYd10LEir6ibqbb3Nli1rTo1JZSrb0t11BktjrnePgYmvNaRsh/LywGOfjvSloCBYFjrZvKaBiIDZba5Gm8iZkc2fWiM+dJZD3VGVeJHIW7NbWCL1koadrH2//TPkeHjrY2IceDsOpqAjYzR5rvE32F7NSRnd68L54N2PMc+jx1izVmF+c1+URRDPiSK6qQFckVP7+le6XThDPWnA2Eblrhg2uFIupzvp91oWqEioM4V2mkDg8IQya0OkGLpdgkA+/4EfckXw1n/qfc1z/9rH672sBmmCf1hFt9rliUdH29tIm28X6JPS3irSfH9xWSySBUwpPp87lkn0RPF6hupeaq199Fy82qGjU3EJDqUdlJaE3kQvtJfZuUTiemig1Se4EmlDRfKY3hfCBogG6bbvYnURnazMkUnlz54Q+rBJkGDVWPm+ijRTRZoS+NC8WBY8x2lTN8sknymQw+3Tj6k3/QgEXUaybRmHLFqYMz3DoWGs7IY3Qh3wihjPqTrOU7VBGogNEwuUFM+zvrp5Cyck4Wlxwl2PUk8XfQz2XbDRJjCGGvdXxLe+EINPQfP3F62vX/jt/H3gL77juNO/7h41139MqNE4pWejPCq6a2NnfBXtdEvre8w1sty/w/d9urMmfffCbomLvZa904hkRZBs5VX9rHSuuB436iWqo1wGnJBfaRnOLTrD3PEn4ex/qvCQ8NCt2E0uFYfKZ7n14wbABlxRjZLx4fRdqLdhk3oJs6ZDQRwyi4OVE+TsrBRt2ubWsFItFlJnX07D3L4rn5ZLJYxwMNc4Hnv552W1y+tnGW3T/koFR/CLiZjAw5Vvk0NJIS2ndUb94hlw+4VIb9ebxqyP1nf99QDhqwIgg4UgDkbVWoeRlHHJn5xgdUYnjJBnrTeqi5mL0+qrvv3ezINPQYv3F6zOPX86LfEf5P9/Z2G49XA00Q0+z0OeOpzGTwbezvzo965LQJQle/aIFfpp6KYmnj1cde+BHccxkeNEbduLZICwlIbBTi3hRunRFC12mhtC1DBmt3VS/MPU/RJPdg/d2ntcVLhJuAWNPNDMCUTM+UwT3aFGgqw6hpwoWZEtnaYG+MeGCCBwvdopXIaHasDcRUauEJIFsyJDM1O6elkIG3FKEC3YleS6/g8xC/YVy+sEYHkIYyDN7vLE7wh82M2oKlwqepraliOScNe0F6yEWFMTiGhWW48gIhBgmO999VlMriMSNbDSIOFSltd4JlIKt4xTeDeNiHvqf7Y2OjdY3VPOZa9BkAIJLtQtPPpbg2ex2Ltuz0K5aRV04h8TzoImWzc4UGGcew6b+9BLVsC4JHeA1b/aSwsbPv/hM1ev3P+nhRfKT2DaP4Bkr+sxm61s88YR4kFay0GVZEoReEWUr6T/XEfTvJXZesQkjOQ492rnPpVLUf+FQ94QeVKwMWxXc48K3UZktoSGlWpEtnU3wkY3ivi2dEt85naZuR/lmsBkzJLO1M9MfsTBqjrD3Qit5TDz3s1N1/376oJkLeZxx5pk93fh7+OMyo7ay62+qWDtw6JGVs0a0fqIaoY8WdzzB46vTejCSMDFijuCQFMKRzqmgUIAENhz2zu736GRRz+VIb6SDgzPiuRker3Z9uTYOYSRHqM4UOPXAKdLI7DmvB2xOeece9wvumVsw9L1KFNYxoV/6hk04pTjf/2H5BiQTKo+EdnDJOcI80pTWwnUsSIBYwoREYcXCLdlWa6E3kwvtJSw7t7JTOsLBZzv31VdmM8w/131hQyBpx2dLMjQhIj/RYO0WNqVascmdTXDfZnHfAkUJ1ES8KJ3raH0f3IjQlxQbI7Y4ey8VGSkH62ivFArw5PwI+70zTErzzC42vvaLSRejjrLBMPVSEcA+/IuVd1RaUH5oTDyAI5OrK9AVSVpxW5K4TUpDkbVWkFREcLztzl1FbNha1HM51hs9F81HrvnMNUhmk5DQjdQ+R4cfEBVde17cmxiGtnPXYm2zQZkJk7+D9mbtYd0SulWWeMXmQ9x14jzUvJgYD39vjiwWLrlUfC3PJuFLCTfwmcVTJpym1Ir+MtlmqHW5FLuR9JvQMRrZOzTDwbnOg0ahip3swsnu/bPBrJNhZwb3RnF9I8FqV4iqQhq5LV3wSpQUF+fEfdMmRTuELptypHK1JOUvEvDuKyaRKHDwiVq/7fHjoORt7N+VZNIe4nSo/tZAVcGfcTPqKT9fk5fswEWUQ4+tfJ2jEbHgubxi4dGEqpaeXyUfelrGbU3jtiSJNBBZawWljK8mInfNMLqjKHsw05s6CU06V2s7V4lhY4RQtHahP/yE+Ow9V/bGJaLt3DXX7FzcyaSzt4qS9bBuCR3gNa/IcLowyeN3HAHgge8Kq+ilr98EgGezeFDCS/WDLbG0BZd55YdItku1FnqxG4nT1/9CkKmNUY4oE1V1Te0gFDXioJjpMtN94CmQc+Nz53CPFPVclvlf04r4jI4JfYewkgJ+sWgmAoIwHK7WH1ebKVtXIXMpO8SIO4vNZWK7+TQHj9duz6Z/KXYx+18ks9EdZ1apb7VFo6JpwwZfeQck7djOlHSYQ8+tTJDLg/Ij24pCVadXR6ArkrXjtmVwy2nCbaoQVkLxCxdHpzUZG3aJOJEmo9Atgv6idO7m2uCY16wQqiMHcvg5IyNSAN+23qT2ao2ilXCWdBqCGRcTnv73uF3XhP7Kd25HosBdt4rt0v2/tnCedJDhl04B4BkRK3E4VH/r32rurGw31uaha/rPfSws0rB3jyr8vU929kCE4yY2Wf04iLPQpSxMQUkSwsuwV8XhACM5ItHqa5AKi3HKts6ujWfMioF8KT0yERLX3e5q3S1gM+dI5qsnrprJ4ldHGB0WBLzXt8ChpVo1y+l7lpAocN7LJ5n0ZQjkPHUX05KOy4aK72k0ssezwKGFlXdUMcWARKG0Cx89Vywc/oXVEWOL5Bx4nFk89iyRbOcFTd2m8Lq2DmMh3TM9l1Cxgbl3W+1C7JWThJK1i9fheQ+7Xe03+W4EbeceD+dWpZeohnVN6GMXTXKxPM1dD/nI5+HBmS28bOJIqamCLIOFNKEGAZ941opLXtkqkO0ijS6XKJN/XBGTuM8uMQD2vlhYDYd+Xr8ydiWEElY8liRj5iDzge6yciInwxQw4hsR5epDhjhRpfr6piKC/ToldIMBvIYIgbAgCC1F1D7UesDKZs6Tyld/1/ipIBmsjIyKce3dnuCZzLaq+wow/dscO3kO+4v3MVncgWuVfpWo1HGpxNSWOLPpkYbt+TTEEkZcBqXk8vNNFoPBqyDQVShATHXidhZwO/NCE71DCd0SoXeYwiuZTT3VcwmFJZzEMMu1C4zXniKYrp20h2Mb2TPeu2C0bcSBRAElml+1KlFY54QO8Jr9p3g4vJv//p5CrODkkgNlK1aSwGOKE47VsRwyGWKqE2cLubM2p/j7lFJ+r1LMkLGvQv+J3ZdPCH/vrzsLloXTMl57inFbhIVod6XlmtKib0xckyFTgohSPZFLhG7vfPfiM0cJRIWFrVno7RCGbMmTzFe7w/zPiSyK0QmxMOzdZyKDlWP3VTcunj7hYr/1WRgbY3KLeO/sM7XBZE0XZnRztcU3dZ64NodX8KNHk2ZcpvJ7zGbwSBH8wf4LdEUjKioG3EMq7iGVCO5y0nSbUEJiQXS4O88Q2WAOsxjujfsyWEc6V0M9Cd3giSiL6ih7zu2dhK/kEm3o4tECs0eES2pia38z4uAMIPRX3yAY9cPvEZPrkt+rLpP3WhTCSh0iiMVEP1H7ytvbkr52JaEnDdgNyVb6LXQN2/6dbOc4Bw91RpChjAOPI8uYK8F8ojsfYfB5kYmgpYS5LUkiyeoHNRUVE1y2d05MPqtCICGIMhEVE83uaX1C2CwFkqq1yupcOiEIS0uL3PuSYo7/ff7Se+JxOBrbwP7NIpI8uVNYc6frVItqOi5aUE+DVjtw6N6FpmOMpcw1MZxRS5ilWP8nvlY74PZIeDwQxlMdPW8D8ZDY5TqHOx+30HPpjY5NSDHjNdfPmPEO5QkXhqo2I8/cI1wtey7sYYJDqVG0WqoSndzVf1mHdU/o+//4IjZz3CZdGgAAIABJREFUisdmx9nMKba+Zn/VcY81VT/gE48LpTvnytvMuoSeMuIw9j/IIQYgs9d+goOnO9O7COWH8A7lGR/OMp/tThdGa96sNXN2y2kiyySKS4Tu6JzQRxxJloq6JlrOf1uEbi2IuEeFVGKJgIvdgfa8fDMABx8r38enH8+iYmB/8THaeJ4gZ83KqoQWvNR83xp2XL4FC2kOP9Lc4o1lrAxZqwl9RI7jj/d/26d1K/IMG3APG0kjk17oLA9ciRRrMoY7t7A3uJI903MJJWWG5QaE7hHxKK0GAODwr4WrZc8lPez1qTWKjsPc8SQmsozs6m+VKJwBhC6N+Hj1yEMAXOJ8Akarg1weR4ZwvSa4xfZzK1WJgvChQ3UHnHjajNO0SoQO7B0P8Ux0oqmUaz2oiSRhPHg9KmMbVAKqj2y087S4oJYStkVcOLctW9PkIhUTE1xbCDuBz5UhkBUTPBETC6nd2zphlPR3KorBtPZuIzvEeV2TLrYYZzj4XHmhmP6JiFPsv1xMvuE9G7CQZvZEbaxlcb6AHQX7lmoiMO0+h50c4dAzzadXLCvjkqv996OOJP5U/7rCa9DUFd0jpnK2Uoea6EoPUnh7qecSTDvw2uunhA2PFCV0T5W/6+Gn81hIs+1lm3vy+QDY7cJCTxiYfb7AGAsYNva3qAjOAEIHePWlRXfL3toiEY8zRzhXh7WLLhfX0MpujJIca7JszXcjF9oJ9u7KkVXNPHe4vUh5fCZMHhOeYSPjG4XFvHiw86ib1rxZa+Y85MgTzVcTuqbJ0Y2F7vPmCRS8oKolQq/XUb4RbLaiQmYloS+I84zu9JRe2+uZ5eBC2XKaflDBRZStV4mOV9LGSSaZZbZOPNofMLCBRaHjUgmzmamhGQ7NNS9SieZFP9FKjAxlVkWgSyu2c49aSxXV4dnOqpFLGV9dEPqGkQIKjtK97gahrBOvs36yg7eo71RF6CdkdppPYHL20OViMOAwpFBSBuYWJFElOtnfsn84Qwj9mps38gX+jDe/vnZV9gyJtlPLBY/UWNFCb0H+ViP0ypZmStaCw9KbvNlWsP/Fgsye/Glzv+xyhE+J4JB3xMjYFjFxFw53rpkRDAjhK61oy+3KE1GHqvqtpuJFQnd1nlHjG4YkdpIL0VLOv3249Qlnk6khdP+ShJlMSQwLYO/mOIcTWyjkxWdMHzazz/A0ht07xRusViZNfk77a3cH/rCpSselElMbYxxVxhvXDhQKxAoOXMtiOKPDefyqDzXX3xS3yKIwRtxjMu4JsSB3qoleIvQNnad8aS34tMB1NwgWPAwP1b9+3mLsR2vSAvBMwMceb4974AFOU4p4yiSqRI2LK2uM9ABnBKEbr7maP/vMFM63/mHNMY9HIowHNVhNYolAEhVDW4ReaaHHu5AL7QRT12zBSI4n72/vgQ8Vhcm841bGzxUkPH+k89LyQMiAR4pgNImdjXsIIrhRI+Wsgp4Q+gZxXwLHIiQUFQN5LN7WCcNWR65hKWxk1Bisqgye2isWjpOP+FFVmF4YY//IHBjLz8VGR4jZSO1n+2O2Kh2XSkxNCTG0hrUDxX6iQ65lhD6qksVCbKa/ei6RQFFGeMKGe1J8t0410eNxUY/Qzv1Zjg0bxbOipYJ2ilQkTQobXk/92FhJQndO3JdsRuVoaiN7NvdebsFhzqCkTczFnEw6+l8lCmcIoWMywXvfW3cF9I4YyWIhOVdNhKXmAiv0E4WyvnZlBxwlb20p5bFXkC+aYifP8eRT7f1dqGiJeCZsjE8J18DCqc59/8GYiWFT+eF0ew3kMJNcqCD0YvDY5u4868E3Lu5L4ESMRAIcKEj21l0usl0ij4lsrMJCj8qMWKsJeO+Lhevo4D3zzDyvEs652L+r+vpMepLMJj0shz/pqNJxqcSei8V5G9UOlNvPVb8+UlSa7JbYVkK4KNfgnnSULPRONdGVhISTOJK585iJJnuweLw7PZfQCXHdNF/5cng3iUVHk9A9+psgOczsmep9gaDTkiGYcrCUHmLCuzrxtjOD0JugVC26TEK3JH/bQqpVTUuzfB5FteNoUc61J5Bl9g2d5MmZ9gJH4YWiUNFGO2NTwlc8f7rzcQfiMj5r+VoOeYUlW9nkQiN0eagLQt8oLnpgJomSkLCTrOvaaARbMZCdjJTjHEsJG6O2asKYukr4NQ8+HGf6ZyJ9UXNvaZjckCNWcJZK9aGo45L1MOquH0fZcamQnzj1eH33VjoQJ4sF11D1dxrduDoCXZFwASsprKNDeLyCzCo7GLUDJSHhkLrTnxk9RyyA/udbI75kEu69t/b14Mn60rkaSproRQldTURtz4Heu0Mccp7ZtMgqmxhdnd38mU/oWsBnWRNcLXdWky5thhKhaw0TFIU4zo7lQjvF/m0xjiUmqohlJWiWiGeLC5vLxJAUZWGxc2skmLIxbCtPulKGxFw5oKa5pmR352lsvi3CkgqcTpFIiZz/dmArFjUlo2Wr058eYsRV7Vbw7p1gQprj4DMGpn8ugsXnX1PdrWZyozjX7MnyuRQFUqrMqK8+CQ6dvwWZJPMz9a3e2IK4Xi5PtctvZPPqCHRFohIewuBy4S7GYDvVRFdSBhzG7sar6bkszrZGfF/5ssoVV8Bjj1W/rrWX847VNyacmzyYyBIq7lAOPyp4Yfdl450Muymccvm7aM9Qv3HmE/qEmCDh+eqVPxYutp9rx0KvIHQFR0spj73EvgvF5H/6wda346GAeHC9xSDmmDnEfLBzyzmQceFzlknRXWwiUul/1dI7u7HQtdTCpYUciZSh7Zx/LcNG8+cDLOU8VcqIgOjb6nyeg6c9TD9eYBvHcf+PvVVv2bhDfI/Zg2W33eJMMQd9Q/2JKrmcjEmLLPjrT7HYoiDAoeFqS3J0e1Ggq0dCVY0QiRlxS1Ewm3G5RKA7EuuMdJSUqeuaDOdWH1ZSpY5SK+HX3xHVvbd9udq60Xzjwxvru+ckhx0vIUJhcV8OPyuxkRlc52/tdOgNUbmDX40qUTgbCH1j0We2rI+gJn/rHFr5EiwndDUWR8GxKsJcldh3hch3fvK/W1fYCofFZHV7xfccd0RZiHVeuBLMDTHsLpOke0xcnMomF6lU0UL3dl75V1ZcVFHSJuzG9lJENbkGzULPRhKEGGbEV0sYeyfDHIxt4okTbvY7jtW0sJos9oGcPVReSDUf94bJxn7jMUuYhVD9iRxbKrafWxbDGTlHfG8txbJfCCsm3CZhnRoMQsIhHO8siK1kTDhM3aXwShYzG6Ql/IHWKOnRaXFdb/t2oarqM7gg7rfmK6/9IAmvMUowWpRnOO1ij/0UPWlTtAzOiqJFreK43zjzCV3TRA9Ub+Vi0aIWdQuusxKhZ4oFRsEEBYxtybn2AttesQsHcZ58uPXtbShiYMgQL7mfx4ZSzCc7q8jLJbOE8eKraL47NC4Wh2igIm2xODyLs3OrxOIw4yRGICiRyJiwt5nzb3OJCarlxAePiBqFkbHae7Z3d5646uRQbDP7t9RmEU2eL2IPs8cqAqyajsuWxovWuCPKfKz+Ni66JL5PZQolgHOjW1iqK5UK5HJw+DDccQd86UuQb28BiCQtuM1lN1k3mujxjAWnpfuajFFLmMXIys9MLAbPhDewm8OcCrt56Ffl5zGkSeduaTyxveY4obgFVYXD4XF2j/am9d1yOIr6/QbyjO7uf5Wo+KwzHFohQThYbZlpOkQtVYpqeejFHpUlQX/36l4+w+Q455ueYfq51vOxw3ETXlM5wDbuyzKfG+lIWS90XJDdcEXz3XKTizKhpFIgk0QydLeD8RkjBKImEtn2i7hKFnpcjMt/VGThaO3OKrH3QHnHsv+C2jG7do7jJMbsqcYyAvUw5k6z0KCcfXn7OQ2SQSoqD9axGJ99Fv7oj+CCC4TM59QUvO518Gd/Vj9C2ASRlIzHWhELkdNE0p3FPJSstSc1GRtssZZkDx5/NIeKgVtcn8VKitv+qbz6hULFHemWxsVZXmuCUFJmYa5ApDDEnh39KRDUGn6MsYBxU/+rROEsIHQt4BNeZnhp8rdtWejZajlXRxtyrr3C/rF5nvSPt8zHoYQVj7Vs0Y+NQRgv6fn2rRItg0Br4gzgHhUEWRlQS6UlZKn77jM+S4xAzIqSs2C3tGeBajnwmj+/JMy1udainrp8rPTz/ivqaN2MjrKRWU7Pl6dLScdlZ206o4YxXw5/friu8azFcLQdTiVGzJH6Al2f+hTcfjts3izSdL/xDfjFL8Sxhx5qOI56iGRtuG3le+RxZAlnOpPQVfJWHHL3WRyjzhSLLcgePPojkY10xf/zQn5Xupv/uNNausbBsISbCEa58W7Da0sTStvKbef29afRu6YPvxq9RDWc8YRutYJNShGOVn/VWFHDuxUL3WgEsyFXS+h9bhBdD/t2ZQjmPcw939oECqVteCuyUsY3CTJeeLr98v/AKeFz9U2Uv/dQ0QCt1P7uGaHbEgSS/397Zx7d1nXf+c/FvhIASRDctFoSZYmUFymOHe9WvchJmrRxJ840mbRZPOnkzCTNZNKk06Qn09PkpJ00zbRN0iRt3XbaulMnTnwS23UsJ7ZzHCuWbNmiJMuSrMUkRYoLAAIkwQW488d9DwCJhQAJEAT5PufoiAQeiPuA977v9373d78/J5NJOy57eYLubFAn6dSEEnS9vVm+iDp43RaaGcbBFNvu2Zb7x0wm2u2jDIxmounhoSQOpnBvKmzoFGoVpDAzOpD7Wej9RL2hXEFXzoMLHk+l+MnDUa7zHOc99h/xGfkVvj31AZ6evZlL226GQ4cKjiMfkVk3PlfWXIgnSZSGJVnoTiQduB3LL+FtCcyU5Ody5Lkp2hig7b4buX/vaQYnGnj2p+r4CBexztUJeGYIz3p47RcqDbfzhsp4yCzE41fnWpvpciayrDIlCboQ4rwQ4pgQ4qgQ4nCR7d4ihJgTQtxXuSEuH781TniBhW48YcYqZrGVqMkO8yyJOfUFpe1CA9W5shej53olSMee6Ctp+8ise56vResWFaEOvV7+whV9uXRjZ0ZszGZwiwnG45lDaWrGhMO0/NvYJk+C0WkPk0uIAPVFTbqgj2j9SfVJx3nY7VzjOsW1lmOYN+T322j3jjMQy0SPwyMmggwjAoUjdP3iOXgi12NoXJ/DyZO2y3aaTHPoEF+K/A6nExs5cQK+/nWVadm/HzrP/owTPx8rObqenYVJ6cLnyVwk9RW/S7HQnUg5K7ImI9gkmcSVthIoxJHXXOw1HYWuLt7+ye24ifPQ19QCrvCElUZb8YtSY8MckVQDJ1+ZxU2cjhs2Lnvs+dD94dvdURZtXFwhyonQb5dSXi2l3JfvSSGEGfgK8GRFRlZB/PYEkan5+cHYlBWvtfRSq2xBn4gqcal6g+g89NyjaqSPPZMrEjmkUoSTDfi9mRM3tF2F1INvlG/ENDqoRFqvEdfxWSaITmTSMIkZc2UEvWGO0TkfEyknLkd5qQC9ZDIxpUXoWjlc87b8AvzgB57mX9/3g4InXntjgoHpxrRmXg5bC/q46IQ2F754xrQSwXx3iMGGGYZn54/z7IPP8TNu5398KsnJkzA5CRcuwKOPQkqaeCx8PZw/X3As2YxrAay/ISOcvoAo6omeTGZel00qBZO4K7ImI+3ncrZwhB2Pw2tjLextV/YMrvcc4F3Wx3j4KT8zMzA26SRgL140EPArW4ZfvualS5zGtKGj6PZLRS+JbvOvTNNvqGzK5b8C3wMq73KzTAKuBJHp+bnT+IwNTxkTbQ7LHInkAkFfhv/zUmm6fjvt9PPqKyWcQOPjyjo3qyols/y//JTImOa02LhlfpTrs85vcpGYNeMwLz+n2hxIEpYBpnDhcpYnGOmUy5QSzpExEz4RxWrPf8i3f+sLdP7Dlwr+vY5QkmlpZ0y7jg7HHbQ4it/a6xfPoXO5F8/YhAmXmMxbLdfcmGJcNswz9vrb7zVgIskHP6aOY7MZNm6Ed74Tdm5OcJD9Jadd9PkOnz9z8fI3mZUnz2j+QOEv/xK2bZvnwQbApOaF7qnAQsuWTm2VbBHbg6MvpZCY2LtHG4jDwf23DTE24+GpHyUIz7hodBUP1AKNar9fGmxnp2+grBXI5aDPL3W2rJwra6l7IoEnhRBHhBAPLHxSCNEB/BrwzWJ/RAjxgBDisBDi8PDwcLFNK4rfPUdkdv6Ej+onWoagZ/WojMfU36lFhI7NRo/3PMcuLp6TmxkcYxI3gcbM19xyhTrzBgfKv0UeHVUmTL4N8ys3fI7EvAqJxKwZh2X5VQ9NzRnBKbd3a3qlqLZqdTiqRdRLpH2Dmj/RG10MT3kIeopHXmmrhYu5x1lsyozXnP8uKRhUY9abicwdP8WDo+/kwO436cgTTP7KvVae5RZmni+YDZ2HbpOrr00A8DXbSGJhcjD/RerVH19keBjOnJ5/YZ0YVn+rEmsy0n4ubxROmbz0pJr72XtH5vi/+/euxk+Yh752ibFZb0HrXJ1AUH2XM9LGzvalecCXwuZtFh7ivbzvurNVe4+FlCroN0kprwUOAB8XQtyy4Pk/B35PSllUJaSU35ZS7pNS7gsGc7utVwt/Q5KI9Kn7VDUQYnPOeUtzF8NhzfSo1HN8pTg1VoOeDVFOxjoXbXYRvqBOTt3PBsDuEARMEYZGyo9KxiKCgIggzPNf2+CYZTyriUhizoKzEoKeVU3jKlMwdEO1dIQec9DsWPrJ236F+oMDvSqCHZ7xFfRx0Wm4IoiDKYYu5Z4W41M2vAUapAS1fq16pPrE/+5lgA4+/N/yX9X232lmEjcvPF1aGk23afA1ZY7f9IrfS/n/Rt8J9dn1PjN/Mj0t6BVYk9GyVVslW8TP5cizE7Ryifb9V6Yfs91+I+9x/zs/+EWIcMpHwFc8WAm0ZO4md+6ooh+T18t7+X9FJ84rTUnfgpSyX/v/MvAIcN2CTfYBDwkhzgP3Ad8QQry7guNcFjk9E6emiOPG4yy9csJhTZLADnNzTGi2MOVGjZWi5yrBNA5OvzBadDvdv0b3gNYJ2SIMhsu/uxgdt9Jkyb0d9rnnVNd4jUTSgsOy/JWO2dU0Lnd5grFwde9IorAzYim0d6k7m4FTyv1xUroINhbfR2GzEjINMzSSe+GPTdvw2vILl97zVC+1/JtHm2mxjPKO384fBN12G5hEioOvdcDM4nedej9RfzDz+RayyNDpC2uT8c/Mz7FPjKrtK1HCq5eAFvNzOXLSyV7xMuzKsmcwmbj/VyeJJV3MYaUxUDw9p1voAuy8tort/tra1IHY01O991jAomeJEMIthPDqPwN3AfNMXKWUW6SUm6WUm4GHgf8ipfxBFca7JPwB03xP9JhmXVpCg2gdpy2V9teO11jQ99yqbuVffby/6HbhAc06t3W+eLd6YgzGyx/82ISdRnuuvanPkyQqvenViomkFUeZdeP50PuWQqamt1RMJrAxzdS0NtE246O5Yem5zPY9KsrqPzeTKYHMs+p0ISF7hME83exjs3Ya7PnHo6cehi9OMdQ7zI/G3sYHr3sNa4GiKr8f9l0R5mDyVnjllUXHpPvu6FE5gK/VOe+5hfRPqbmX3mMLUi5hrYTXt3xBd29qxskkw5fzn5cTE3ByJMje1n4Wlqfd9rkbaEE1f9Fz5IUIdCgRF6TYfmPLssddkKYmGB6GAweq9x4LKCXsCQE/F0K8AvwS+LGU8gkhxMeEEB+r7vAqg7/ZQhIL8QEtP5juJ1r6RJsjS9AnJk2YmcO+8nOiAFz5jitUs4tDxb2j09a5C3wt1ArGwuV2hRidctHkzI1yfT6pSt60MohE0orDuvxb2aZNmRIQV5mCDuA0KUGXKclIqnHRiLoY9s1tNDHCQF8qnQoJti0uYq3uOEN5Lp6xWSdeZ/60VPNmtd8jAzP8wxfPMYeVD326+NLx/XdbOMRbiT3z0qJjioyoCFgXcchMkEZHc6Pj2Mg0Ualy1r0X58+fxEc1G+oKlPAKh51gET+XV45KUpjZ25N7IbT0XMlvBJ8BINBS/HvR++Fu4RyOnu3LHPUieDwrVrIIJQi6lPINKeVV2r/dUso/1h7/lpTyW3m2/y0p5cPVGOxS0a00057omqB7vaV/0A57lqBr7n8r+D3Nw97RzA7LGxw7VbyIXrfOXehr0RqcYzAVzC1ZWITRGS+NntwIrsFnYgoXsyNK6BIpGw5bBQR9a2biy7WEW3qnaZrEjIl4f5RpHDQvJ5Xp9dJuGmTgspnLZxf3cdEJ+RMMTedePFU/0fwXmMatfgQpLg+l+O7j7dxof5Gd795Z9H32v7uBOaw8++PF5wl0mwa9UxFkragey/3e+n+p7gS38zpn4qH0VBTAREQdQ+4SXEtLIWiNcjnPHQ3AkZ+o+Yu9t+e3U/it989hY5quHcXfw9Xmw8oMOy1nWN5BsfpY8ytFIZNyiFzSokst5eIpoUG0jsOeaWkWT1iXbRe6XHqaBzk2FCq6jW6dq3vC67S2CWI0MHmhvEqjsbkGmhpyIzhf4/wmFwlpx2Fffl2yt1OdeABuf/mC4TDNMjVrZuS0SrUF25Y3id3uDDMQdpXk46ITak6q5f9zWZ9HKkVMevC681/0LKEmAoT54eFOXp/o5MM3n140yrvxJoHDNM3Bo3msCxYQDadwE8fSmBFGv3bNieapGOx7SVUi37PhOBITJ49mLurpEt5AZW5XN7lHeHl0w8IWwAAceSZOiEHa78h/cdv3h28n9onP0/2fri36HiLg53peYH/byRWNnleC9SHoWspBT0HMRSdI4MRTRt7P4ZCZCH3agse6/KXty2HPjinOzXambVjzEdHqjRc2pQ9p9b55l/+fPw8vvpjz8MxUkjjevBNOvib1OeoVEpUSdGG10CRUVOZagqA7LTNMzVrS3X+a25cnOh0NcQYmGtI+Li3bFy8dDbWaSGFOT3ACEI9r/UQLfEY2G0ExyqvDbXiI8RufXHzhi8MBN265xMHItaSL5QsQiSq/k7RvA5kIPZ8nev9JlUo78E6VVul9KmPfPDFe2UV2n7juFwzONPGNr+Yq+pHjdvbyEmJPgUlGnw/bn//J4gZNFgvPet7Op27OPc7rnfUh6At6JsZHtH6igdIjNocjE6FPzNpwW6vbgGAxet6ibvd7f3yh4DbhqBmnmMrJ9bduVZ/H0Ok8Nccf+YiaxEnNjx7Hzqtts2vDddIGXYNTkEySwJGuMlkuTVr/UtcSIkCneZapWSsjF9WFJrhpeRUN7c0zDM40MngphY1pvFsWv11v3aBEcOhEpiJpLhxjChfeIi7GQZuqmb/f9n08d72tpPHtvz3Jq1zF5SePFt0uGjMpQc8SPpcLzCKZ1xO97w0VNNz8oe3YSXDsF5mLk17C6w5Wplrkli8f4G6e4MtflvNWpk5OwonhIHtb3qQiB9ef/ZkyOFtjrA9B1xbW6CkIXdA9ZZhrORyCKZxK0OdsuO0r0yOwED13K8+RYz8rbLIVjlvxW3MnTtPL/88tiIKGhvj0wQPcPPoIvPrqvKdGz6vcbGOeCSe9ycX4yAzJyWlmsVVO0B1KPJYSAToscyTmLOmIWu+CtFTa2yRJLBy/6F3Ux0UntCX34pluP1fEfrnZob63j9z+BgXLWxaw/z+qNmpPP1w8Qo9OmPGbYmq5qYYQ4LfPX/Gr09dvoskcxnP1NnaJk/SezLwurqXsKyXoXHMNf/y2xxiddPG1r2QmP9MTot0VujP+6EfhLW+pzN9aRawPQdfOu0hY3eKm+4k2ly7oTpfI5NDnHDUX9E23bsZDjGNHC1duRCZtBOy5C0Vad6mKiaEF/S6n/+X7/A0f4ufczPmH5686HLuohLUpj5+4bgEbHZklEVEXS4ezMrlJvarG1VR+9yOndZappJWRQfVdFbO6LYX2jepi9kp/UK06LSH/mu/iqbef8/oLp/xuDb3GAR7jug91lzy+vbe48ZnGOXioeG4/OmnDl+dCn/ZEX2Dy1T/mpNMTBbOZnsZ+jg1m7kwm4hIrM9h8S+9OtZC9f/Jefp3v8dWvSka1G5sjT6vk/t7bKt/MeS2xvgRds9CNjWn+E2VEfQ6nWswjpxJMpJx4XNVtEbYYJpuFbvc5jp0vfICHp534nbkRTbBTpS8GL80/cZ/8zgUiqIT74z+cXxo22q/3asyNxLKbXCSi6v0qJuheNY6lCXqSqaSN4RGwMoO3dXkLB/Q2YpemGwmWuOq0dbeapBzqy3yehfqJZvPJvc/xmO3XEAfuKXl8ZjPcvuEMBweuLOq8GEnY8dlzJ/V97jm1ojq7C3kySd9EgM5mNeburZMMTDen0/QTkwI3E5X1Q7nxRv5o7w+JT1v5ypfUxfjIz8ZpYYiOO7oq9z5rkHUh6BYLeMyTROKa/a3eT7SM2lmHS31U0yMx1U+0TLOoarCnM8yx6EZkKv9YIjPuvL4WVis0m8cYGs2aQ+jv56ETPTQ6J9nsHeGx17aQ7S0wVsBpEbKWjYdTGUF3VebQ2hyM08goVl/5t/ROW5JEysbImJmgaWzZHZQ6rsykbILu0pbZezcG1PL/wcx3FBvN335uHp/6FDz4YGkdWLLYf8MU51KbeePp8wW3ic448TlyL/R+bzLXQvfNN+mjI+0h032NGvPx55SiT0yZcJsq7ya460vv5wP8I3/xFzAwAEeO2dnLEcTVV1X8vdYS60LQAfy2KSKT6mBMNxcop2xRE6jEUJQ4Htzu2gt6Tw+MyUYGXh7KfXJ6mrD0EfDmv5MIOaIMRjJR7+Q/PcIPeRf3/eoM77hhjINzt5L4xcvp50c1p8WmLbl5aL1CYnwcEuNKrJxlLtUvxO9+Eg7f+ftLigAdthRTKTvD43aabeX7vy+kpbsFE+pzWMzHRUeYTYTMIwyNZKLxtKA3F5no3bcP3ve+ssf4K+9T9gAH/znPMaERnXXhd+WOP5/pORInAAAW9UlEQVQn+vTJNximhc4r1Fh79quVlceeUn9fX5NRce68kz/seYS5Wckf/H6KE8PN7G26ULvl2XXC+hF0Z4JIQqVYdLfEUroV6TjcKppNDKsIvZzXVovum1Qu6fgTb+Y+GQ4TJpBONy2k1TPB4EQm+vvxdwaYwMP9/9nPvR8MMoWLZx48l35+bFTlSt2dud1d7HawMUM0JtKCrn9ey8X13ney5cm/XtJrnfYUUykHI5NOmp3FV9WWgqWzlZC2vLylqfSUW8geZTCSSe+Nj2n9RFsql3fW6br3CtrFAAefy3/3mUjAtLTjc+eO3xcQOYI+8JIqUezcpa7aHbfvwEeE3iMqwq/amgwh2PrFD/JRvsPf/b2JpDRz7e7algrXA+tH0F2zhLWeiXqXrXLuZnWBmrg8wRQu3J7af3Q771KdVk69mBt9pkbGiOIj0JR/nK2BaYZm/CrXev48/3JmH63eOLfcArf9WgCHSPD4UxlRGI2YaBJjCGv+vK/PEicat5CIqRRPpQR9OTgdKaZwMJzwEvRWQHSsVtotajFWsKX0u7tWb5yhiUwEEIsW7ie6XITFzP6WXg6e27qw8hTILBzyeXOf9DVacppc9B1X5ZOdPepCLoLNdNtep/esuhhNzFRxTca73sUf7Pg3HEJ9d3tvMaLzxai9Kq0Qfm+SCD61qKOMfqI6Dq2LvJ5LdjfU/qML7QzQIMY59Vruc+N940hMae/nnNcGUwzKEMTjRP/+BzzGvfyH9yQxm5X17O0bzvLYm91p976xcQuNlsINHXzWSaJTNhJxTdC9K9+ebyH66t6RWR/NvspUJXW4tVWn7aUvSgv5tYunRiyqtZ+rQoQO8Cv7IozMBTh2OFdo04KeZ02UP2glhpfUaJagn1Zi2rEhc7z3hIY5NtqGlDAxY8Ntq9KaDJOJ9i98hM/JL9HDq2y4o8q+K2uA2qvSChHwp9LRR3xS7XY56TinR53AI8NauqZGXujZCAFd3kucGsi9Mum+Nf6W/Hna1nYTk7iJnx3ih383xjQO7n8gc5bfe+csp+V2Tn//GACjcQdN9sKNB3z2BOMJG4mYEk6HZ/nue8vF6YQZ7IRpJNhUGd/rdr+2SKmz9AqpUHOK4VQTyRkVmcf0O8QidejL4dZ3qnmO5/8t140zGtbsIBpz39sXciAxERvMpKf6+9Xx3tmZ2a57xwyRZAMDF+eYmLPjtlWxhPe97+XzW/6JV7gKce011XufNcK6EXR/Vs/EWMKCy5zIXlexKHrEORrWLga+2kegAF0dcU7FOljY7UK3zg205xee0EatdPGJozx04Xo2BaJcf33m+Xt/ZxMAj/+jWrg0mnDRmMdpUafBMUt0xkliQonWaojQnVmVSM3BypRRtge1mvYtpd/etbZry/9fV5Uh4zETNqar5ta58cBuGohy/MXceYPooNbcojH34NerlXSLDKSkb9iB15bIdgmg+60qEur9934mltDAuywsFsQ3v4H47Gfz31YYzGP9CHqThSg+UiNjxBPWsvN+ukCNRFXk6S5jlWk16brSxJtsYOLYG/MeD2snpb8jv/C0blOPH//rn/MT7uT++8W8dTJb9wbYYT/P4y+oVMHYjIemPE6LOj73LNE5F4m4FqE31P7zcWbVwgfbK3OBuW3PGNdxiI3dpa86DW3QvHNeU6mM2KQJr6n8Jt2lIjo76DadoPdMbkonckmlUHzNuZ+HP6BZ6A5rFTBDQ/TNhegIzB9r991ao/Jnx5hIOnE7qtj1B+Duu+HLX67ue6wR1o+gB61ITIwPxInP2PDayhR0bZJvNK6imFUj6NcpYTn91HxPl4hunduZP68U2qGinb86fy9zWLn/gVyBunfXBX46dhWTYwlG53w0NhSu7PB5kkRT3kyEvgoEPbsWvnlDZfLVN//WFRx66ydwbN9Q8mtCW9V3oC//j01Z8FqqJ+iYTHT7++m9HMxZX6Q3sPCHcr+ftEHXiJYTP3uWPjrpbJsv2E3Xb6eNAXpfTRGXLtxlNIoxqC7rR9B1C92BSWJzDjz28iZy9JWPo1OqMsFTrIZ4Bem6XUVLpw7Nb4Ac1nytC1a5dKmz9yfcRVdLmKvyrNe49902pnHw2P85QwInTYHCJ66vQTJOA1NjKi3j8NX+88muhS/F6rYkbr4ZXnihLIMo/eI5eF5Fx7GEFa+1uvbL3RvHGZ31MbSgHD06oqJvXyj3Apf2RNcsMjhzhn466Ny6IJq32ej2nOeVC37lWmoUn6wa1o+gt2uOi5emiCedeJ3l5f3083c0pcq33EtYil4Ntvc4EKQ4dWJ+9BzRChUK1aE3t5jSi2Tuf78lry3JLR/bhYsJ/u8/qhO8MY/Tok6DTzBOA5Ojq1PQl2vMtRwyy/9VEDE+baehzDvEcunerb6z3pfnBy6RkSSCFN5Qbslk2hNds12eO32OS7TR2ZWbtuvpjHBsXM2zGGt9Vg/rRtD1xrCRC1HV3MJZ3m2iLugjKGMit7/2k36gKjk2ukY41Tf/rAqPmzEzV7DW3mxW3WEA7v9o/o3sLT72+4/w2BvKP6OpSGsvX8CMxMTIqBL91SDo2bXwzdtzF0StFN42j1r+r0XLsVkHXkd17Zd3X6++097n5jd1jkZSeIlhCuROMGY80ZUsDB0fIYmFjo25E6jd3ZBEm0/yrK0mEfXMuhF0fcIn0j+h+okW6BZTiHSEjoq2VsNKUZ2utnFOxdrIbvMSjlnwWyeKGgJ27mrg6p4kO4t0N7v3LSPMovKtjW2FRVpvcjEUVhe6Snm5LAentnbARwSrp3YXGCEgZBllcFR9RrG5wv1EK0XLvo0EuUzv4fmVSdEI+InMa26hkxb0CTXOvtdVnj+7ZFFHX6UM5TfwNqgetT/rVoi04+LQtOonWqYgO7UMSzpCX0W3mV07JKfoQp44mX4sMmXDby9umvS3/2DhXx8ufjIeeH+mpVlTkdprvWrictyFmblSLbyritOrhCloiSyyZfUJOaIMRdVBFEu58VbbrXPHDrrppffU/C8iGtO6FeUpAbTbwW6eVRYZUtJ/UY0xn6DvevsWBFpzi1WwJsNAse4EPTySVCmXMhpEQ56Uy2oS9H0NxPFy6bkz6cfCCReBPNa52ezZAzsWaai76df3sovjADRuKHwVbGhRH9DQVAMOsTo8N3RBb7aXZnVbTVq9EwxNeiGZZFx6afBU2dytsZFux1mOX2qcV+kSiVmUoBc4gP3OGaLSC3199MWV6OcTdPcVrWw1nQcoq5WjQXVZN4Ku32GGJ20qQi9zlZ7VCoIU0ziwi2ksq+gY7rpRXWRO/UIzqZaS8KwHfx7r3LLxeHhH+8tYmcnrtKjja1XR51AquGoEXV87UKrVbTUJBWYYnAkgY3F1/K1An4bu9jHisw4uXsw8Fp204LMU9i/3uWeVQdfhw/TRid2apClf32kh6A4MAKunhNdgHQm62QwN1kmGCDGHteyl+0KAw6T5uFTDXW4ZdO1S+3KqV1sQEosRobB1brl8/rf7eNZ+J86OxoLb+Nq1WmtC6c+p1jh9SmiavbW/wISCkhHZxPiFMSSmsqybl0r3TlXJ1dubeSyasOO3Fb7A+byaRcaLL9JPBx2huYLzMD1b1UpUd6Mh6KuFdSPoAAHHFH2o+8dymlvopAXdUnuByKajA1zmaU5d0BL9Y2OECRCoUGGH5/O/y/XHvkuxtep6X9EJPDhMtW2graMLejBQ23aBkFn+f+55ZUdbLR+XbHbv0xqJH8kcr9FpBz574ePX72NehN65qfCt6C23Cuwk6Ni+ivKP65x1Jeh+10xa0L1NSxB0sxIqt3V1RKA6JhPsCEU4NdEBY2MwNkYEP/7GCkWBdjtsL+501+DLvJf+OdUab4sTB1Ns6qy9oOveOacPq1LRYu3nKoVvzyY2cJHeQyqSlhIis258eZpbpF8TMGUE3byJzk2F72Tv/PIdRB5/gZbrNld66AZLZH0JumeON1FLtsvpJ6qjC1W5q0xXgq5tKU7RBb29TA1GmcZBILhypSYeD+mFSg7L6vh8nEEPr3zjeT78V3trPZT08v8zr2nNLRpX4LvRK11OqIvt5CQkpRm/u/AFztekPNFlOEx/qi3dei4vFguOe26r7JgNlsX6EvSGFGFUHrho+68CODWhqqpd6BLputbNeTYz/fIJwm8qf9ZAHr+OaiEENJhVJOiwrJ7PZ8fv7Mfenm9Wb2UJdakyqzMX1XdStJ9opdi2jd0c52Sfl7m54s0tdHxBG1F8jNLEtLTnrXAxWL2sL0H3Z9ICHn/5t7y6ULmdVa4hXgJd+7ykMHPm+ctELqn6c3/bytoT+DTDKYdl9X0+taZ1lwokTo+qiQ1vsPw7xLJxOuluvMT0nIWzZ7MEvaFwyaQ/aGUSN+fYAuQvWTRYvawvQc8yqlrKSk9dqDyrUdB3qovVqVenCQ+qSa9CTovVosGuqn8c1tX3+dQab7MdB1OcnlIK2ZDHHKsadG9T30lvL0S09VW+QOHT3qcFPSfYBRiCXm+sK0HPzikvpQ5YFyp35VtBLht9gdCpczYiwyo15A+t7HJ3n0NdSBw2w051IUJAyDrGIG0AeFtX5mJ75VU2BCl6j0miY+r4zdetSEdfQHqc3QDFc+gGq451JejZArekCN2mCfoqrNLyeqHdF+fU9CbCZ1SXoUqVLZaKz6X1EzUEPS+tzkwz72r1E12Ia/cWruAsvS/NEB1UqTjddycf+orq4+zGbJa0tq7EKA0qxfoS9Kyc8pIidE2oVpMxVzZdW+c4RRfhU6oz/YoLultd8JzV7mBTp4S8SlBNJHG5V8ihUK90eTWZbm7hK9BnFrIidNFDWxtltWk0qD3rS9BbVGWBiWQ5/QnS6ILublidH1vX1U4l6NPqwrXSLRj1yTaHvco+JXVKqFHVf3tFvKgLZkXRBP30m460H3spgn5BbqSz07DFrTdWpzJVCd1C12NJLOmE0oXK7V2dYUvXHtXh/gzb8JinVtzxsEETA0ftrdBXJaEWdfx4zSvoLbNpE93m10imTPzyqA0zc7hbCucMsxuiGPnz+mN9Cbp2sHqX6HTn1AV9CSWPK0GX6kPBC1yP377yhlQ+vzqcHKujmdOqo7VDBQJeS3Fb44pisbB7o3KbfP6YBx9RhL/wrVv2XZ1R4VJ/lCToQojzQohjQoijQojDeZ7/TSHEq9o2zwsh8nSorD16TtkTWloSXE/TeFZJt6KF6IJ+mh0EXCvvN6NPtjkcxq16PkIb1QHkta7sd7NjtxULs4zFbMo6N09zC53spwxBrz/KidBvl1JeLaXcl+e5c8CtUsoe4I+Ab1dkdBUmHaEv0bpUt2MtdstaSzZtArtWWhmohHVumfiCq6db0WokdIUKJBqKmGNVA9vOrXSJ1wEWFXSLJVPFZQh6/VGRM09K+byUUm9e+AKwKg8Fj0cZWS21SsVxterV5t5Q2Ea2lpjNsG2jmnjzF1neXS0aNqpbIEfzKi0DqjGhndoq0Sq3n8thxw665TFAaz+3yGy5HvgYOfT6o1RBl8CTQogjQogHFtn2w8Dj+Z4QQjwghDgshDg8PDxczjgrgsmkjuUlC7rWdHi1li0CdO1Rt/WBrpYVf2/fFarRhn7hM5hP606llN6VXmmsVboA+BgHV/GVcbreGxF6/VGqoN8kpbwWOAB8XAhxS76NhBC3owT99/I9L6X8tpRyn5RyXzAYXNKAl0t7O4RCS3utnkNfjQuLdHQLgJVe9g8ZIXA4jRx6Prw+E27rNIHuFQ59swXdOsliJV7699jeXu2BGVSakso1pJT92v+XhRCPANcBz2ZvI4TYA3wXOCClHK30QCvFo48uPYeuv26l67vLQZ8YzS4/Wym6u+GLX4QDB1b+vesBIeCRH9vZsWPDyr5xayvdrnMwCX7H4t22/H4IBov2MzFYpSwq6EIIN2CSUsa0n+8C/teCbTYC3wc+IKV8vSojrRBbty79tffdp9ItGzdWbjyVRhf0lV4lCiqH/4UvrPz71hN33lmDNxWCLV02Nr58gSu9fYtufttt0NZW/WEZVJ5SIvQQ8IhQt2kW4J+llE8IIT4GIKX8FvAFoAn4hrbdXIFqmLrG7Yb3vKfWoyjOnj2wfz/cdFOtR2KwmjB3bePcy1swbXkb8Pmi237mMyszJoPKs6igSynfAHLqyjUh13/+CPCRyg7NYCm4XPDUU7UehcGqY8cOTMjVnS80WDZGwbCBwXpA91cuUoNuUP8Ygm5gsB4wBH1dYAi6gcF6YPt29b8h6Gua1ekyZWBgUFn8fvjTP4W77qr1SAyqiCHoBgbrhU9/utYjMKgyRsrFwMDAYI1gCLqBgYHBGsEQdAMDA4M1giHoBgYGBmsEQ9ANDAwM1giGoBsYGBisEQxBNzAwMFgjGIJuYGBgsEYQUsravLEQw8CFJb68GRip4HBqjbE/q5e1tC+wtvZnLe0LlL4/m6SUeVu+1UzQl4MQ4vBa8ls39mf1spb2BdbW/qylfYHK7I+RcjEwMDBYIxiCbmBgYLBGqFdB/3atB1BhjP1ZvaylfYG1tT9raV+gAvtTlzl0AwMDA4Nc6jVCNzAwMDBYgCHoBgYGBmuEuhN0IcQ9QohTQogzQojP1no85SKE+FshxGUhRG/WY41CiJ8IIU5r/wdqOcZSEUJsEEL8VAhxQghxXAjxCe3xet0fhxDil0KIV7T9+aL2+BYhxCHtmPtXIYSt1mMtFSGEWQjxshDiR9rv9bwv54UQx4QQR4UQh7XH6vVY8wshHhZCvCaEOCmEuKES+1JXgi6EMAN/BRwAdgHvE0Lsqu2oyuZB4J4Fj30WOCil3A4c1H6vB+aA/y6l3AVcD3xc+z7qdX+mgTuklFcBVwP3CCGuB74CfE1KuQ0IAx+u4RjL5RPAyazf63lfAG6XUl6dVa9dr8fa14EnpJQ7gatQ39Hy90VKWTf/gBuAf8/6/XPA52o9riXsx2agN+v3U0Cb9nMbcKrWY1zifv0QuHMt7A/gAl4C3opavWfRHp93DK7mf0CnJgx3AD8CRL3uizbe80Dzgsfq7lgDfMA5tKKUSu5LXUXoQAfwZtbvfdpj9U5ISnlJ+3kQCNVyMEtBCLEZuAY4RB3vj5aiOApcBn4CnAUiUso5bZN6Oub+HPgMkNJ+b6J+9wVAAk8KIY4IIR7QHqvHY20LMAz8nZYO+64Qwk0F9qXeBH3NI9Xlua5qSYUQHuB7wCellOPZz9Xb/kgpk1LKq1HR7XXAzhoPaUkIId4BXJZSHqn1WCrITVLKa1Ep148LIW7JfrKOjjULcC3wTSnlNcAEC9IrS92XehP0fmBD1u+d2mP1zpAQog1A+/9yjcdTMkIIK0rM/0lK+X3t4brdHx0pZQT4KSot4RdCWLSn6uWYuxH4VSHEeeAhVNrl69TnvgAgpezX/r8MPIK64NbjsdYH9EkpD2m/P4wS+GXvS70J+ovAdm2m3gbcDzxa4zFVgkeBD2o/fxCVi171CCEE8DfASSnln2U9Va/7ExRC+LWfnaj5gJMoYb9P26wu9kdK+TkpZaeUcjPqPHlaSvmb1OG+AAgh3EIIr/4zcBfQSx0ea1LKQeBNIUSX9tB+4ASV2JdaTxAsYULhXuB1VG7zf9Z6PEsY/78Al4BZ1JX6w6jc5kHgNPAU0FjrcZa4LzehbgtfBY5q/+6t4/3ZA7ys7U8v8AXt8a3AL4EzwL8B9lqPtcz9ug34UT3vizbuV7R/x/Vzv46PtauBw9qx9gMgUIl9MZb+GxgYGKwR6i3lYmBgYGBQAEPQDQwMDNYIhqAbGBgYrBEMQTcwMDBYIxiCbmBgYLBGMATdwMDAYI1gCLqBgYHBGuH/AzLfODSNkqvAAAAAAElFTkSuQmCC\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uq-EEUlWRj5Z",
        "outputId": "6755fb86-eba5-4223-ce2f-bde691add7d9"
      },
      "source": [
        "# 0.0269\n",
        "# 0.0251 learn rate 0.005\n",
        "# 0.022 stratify=data['MEASURE_ITEM']\n",
        "# 0.022 => 0.0025\n",
        "GetAVGErr(test_result_1, test_answer_1)"
      ],
      "execution_count": 109,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.0025])"
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K3h7SIbeteZU"
      },
      "source": [
        "df = pd.DataFrame(list(zip(test_result_1, test_answer_1, err_1)), \n",
        "                  columns=['prediction_1', 'answer_1', 'err%_1'])\n",
        "df.to_csv('/content/drive/MyDrive/數字AI/ML框架比較/Scikit-learn/LightGBMpredict_49feature.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# XGB 訓練"
      ],
      "metadata": {
        "id": "xmf-3XJBlzzx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import xgboost as xgb"
      ],
      "metadata": {
        "id": "trMU3trAmQvN"
      },
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xgb_params = {\n",
        "    'n_trees': 1024, \n",
        "    'eta': 0.005,\n",
        "    'max_depth': 5,\n",
        "    'subsample': 0.93,\n",
        "    'objective': 'reg:linear',\n",
        "    'eval_metric': 'rmse',\n",
        "    #\"num_boost_rounds\" : 1250,\n",
        "    #'base_score': y_mean, # base prediction = mean(target)\n",
        "    'silent': 1\n",
        "}\n",
        "#dtrain = xgb.DMatrix(train.drop(['y','X314','X315'], axis=1), y_train)\n",
        "num_boost_rounds = 1000\n",
        "dtrain = xgb.DMatrix(x_train, y_train)\n",
        "#dtest = xgb.DMatrix(test.drop(['X314','X315'], axis=1))\n",
        "dtest = xgb.DMatrix(x_test)"
      ],
      "metadata": {
        "id": "n7arGcITly7I"
      },
      "execution_count": 41,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# num_boost_round=num_boost_rounds\n",
        "import time\n",
        "start = time.clock()\n",
        "model = xgb.train(xgb_params, dtrain, num_boost_round=num_boost_rounds)\n",
        "end =  time.clock()\n",
        "print(\"train time\" + str(end - start))\n",
        "\n",
        "start = time.clock()\n",
        "y_pred = model.predict(dtest)\n",
        "end =  time.clock()\n",
        "print(\"test time\" + str(end - start))"
      ],
      "metadata": {
        "id": "tPTQqQFrmx6g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "answer_list = list(y_test['MEASURE_VALUE'])\n",
        "predict_list = list(y_pred)\n",
        "DrawCurve(predict_list, answer_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 302
        },
        "id": "9eNWyCVUnK6C",
        "outputId": "6d9052f3-c525-4e70-b8de-b4a4d56c5d9d"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5.5581565, 5.424126, 5.7457514, 5.3708434, 5.6719904, 5.484071, 5.5719967, 5.5603075, 5.340126, 5.418679, 5.249383, 5.4063334, 5.4144487, 5.318241, 5.3340335, 5.547127, 5.289277, 5.367227, 5.363893, 5.5500464, 5.783739, 5.528439, 5.464634, 5.528439, 5.3539042, 5.2194724, 5.603713, 5.255701, 5.3927083, 5.3433313, 5.3522506, 5.302728, 5.333485, 5.486016, 5.3096166, 5.484071, 5.3616624, 5.3164024, 5.4144487, 5.487794, 5.31182, 5.502014, 5.5669703, 5.532125, 5.505216, 5.5201955, 5.458414, 5.5719967, 5.603713, 5.4571233, 5.4753256, 5.144957, 5.651049, 5.3720603, 5.4567385, 5.7232485, 5.333485, 5.547127, 5.3096166, 5.651049]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "GetAVGErr(predict_list, answer_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FoO3r5HJoEbL",
        "outputId": "2cdd8244-2000-45b3-d267-e08a1272960c"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0265"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Random Forest訓練測試"
      ],
      "metadata": {
        "id": "hKAtyEL0JIU_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "forest_model = RandomForestRegressor(n_estimators=100, max_depth=7, random_state=1)\n",
        "start = timer()\n",
        "forest_model.fit(x_train, y_train)\n",
        "end = timer()\n",
        "print(\"train\"  + str(end - start))\n",
        "\n",
        "start = timer()\n",
        "preds = forest_model.predict(x_test)\n",
        "end = timer()\n",
        "print(\"test\"  + str(end - start))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nhus7jceJNO6",
        "outputId": "a1ad16e6-b34c-432d-b134-b47679013ac8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "train0.18502624199982165\n",
            "test0.010622682999837707\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  after removing the cwd from sys.path.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "answer_list = list(y_test['MEASURE_VALUE'])\n",
        "predict_list = list(preds)\n",
        "DrawCurve(predict_list, answer_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "id": "PAXOmgYQJzaf",
        "outputId": "ded52044-476c-45c8-8b90-bce712be5c33"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5.60133524814491, 5.469996769873738, 5.813002594960538, 5.396719668022103, 5.734906965121429, 5.511029581713823, 5.5927285078246385, 5.6056121575796745, 5.381340694992877, 5.466247360303916, 5.340870745149637, 5.458809709179668, 5.460182273210801, 5.357551192368379, 5.399992686175372, 5.5582106710894745, 5.329928520668225, 5.434775691920339, 5.394917074033828, 5.601141705490896, 5.847430805982794, 5.509440265892604, 5.486189278767012, 5.509440265892604, 5.381887337951946, 5.277224186873557, 5.635259898349804, 5.341030293266066, 5.439172096491956, 5.427527293086882, 5.39014597708159, 5.328589724625733, 5.374325531928765, 5.490662837117213, 5.406399481740486, 5.511029581713823, 5.406789197206202, 5.376990615086405, 5.460182273210801, 5.5418768327683665, 5.37328163953286, 5.505084935447069, 5.594630841961061, 5.517599134807614, 5.5494770578380415, 5.5589094357851145, 5.47842917863424, 5.5927285078246385, 5.635259898349804, 5.482670924605883, 5.483780452373723, 5.19920211094172, 5.765370357135632, 5.409842081847449, 5.491191903156356, 5.818590944036244, 5.374325531928765, 5.5582106710894745, 5.406399481740486, 5.765370357135632]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "GetAVGErr(predict_list, answer_list)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DKg5PMWdJ_1-",
        "outputId": "b7f07662-a1b8-4d51-9ce8-0c41e7e5aeec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.0264"
            ]
          },
          "metadata": {},
          "execution_count": 124
        }
      ]
    }
  ]
}